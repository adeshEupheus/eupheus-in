
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model News
 * 
 */
export type News = {
  id: number
  headline: string
  desc: string
  date: string
  link: string
  imgUrl: string
  createdBy: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  username: string
  email: string
  password: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Payment
 * 
 */
export type Payment = {
  id: number
  userName: string
  email: string
  phone: string
  paymentID: string
  parentName: string
  class: number
  section: string
  SchoolId: number
  orderid: string | null
  status: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Schools
 * 
 */
export type Schools = {
  id: number
  name: string
  state: string
  city: string
  coupon: string
  price: number
}

/**
 * Model Unsubscribe
 * 
 */
export type Unsubscribe = {
  id: number
  email: string
  status: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model OsLiteRegistration
 * 
 */
export type OsLiteRegistration = {
  id: number
  firstName: string
  lastName: string
  Designation: string
  email: string
  mobile: string
  schoolName: string
  eupheusSales: string
  state: string
  city: string
  dateOfWebinar: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model OsLiteState
 * 
 */
export type OsLiteState = {
  id: number
  state: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model OsLiteSalesPersons
 * 
 */
export type OsLiteSalesPersons = {
  id: number
  name: string
  stateId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more News
 * const news = await prisma.news.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more News
   * const news = await prisma.news.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.news`: Exposes CRUD operations for the **News** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more News
    * const news = await prisma.news.findMany()
    * ```
    */
  get news(): Prisma.NewsDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<GlobalReject>;

  /**
   * `prisma.schools`: Exposes CRUD operations for the **Schools** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.schools.findMany()
    * ```
    */
  get schools(): Prisma.SchoolsDelegate<GlobalReject>;

  /**
   * `prisma.unsubscribe`: Exposes CRUD operations for the **Unsubscribe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Unsubscribes
    * const unsubscribes = await prisma.unsubscribe.findMany()
    * ```
    */
  get unsubscribe(): Prisma.UnsubscribeDelegate<GlobalReject>;

  /**
   * `prisma.osLiteRegistration`: Exposes CRUD operations for the **OsLiteRegistration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OsLiteRegistrations
    * const osLiteRegistrations = await prisma.osLiteRegistration.findMany()
    * ```
    */
  get osLiteRegistration(): Prisma.OsLiteRegistrationDelegate<GlobalReject>;

  /**
   * `prisma.osLiteState`: Exposes CRUD operations for the **OsLiteState** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OsLiteStates
    * const osLiteStates = await prisma.osLiteState.findMany()
    * ```
    */
  get osLiteState(): Prisma.OsLiteStateDelegate<GlobalReject>;

  /**
   * `prisma.osLiteSalesPersons`: Exposes CRUD operations for the **OsLiteSalesPersons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OsLiteSalesPersons
    * const osLiteSalesPersons = await prisma.osLiteSalesPersons.findMany()
    * ```
    */
  get osLiteSalesPersons(): Prisma.OsLiteSalesPersonsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.0-integration-fix-empty-path.1
   * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    News: 'News',
    User: 'User',
    Payment: 'Payment',
    Schools: 'Schools',
    Unsubscribe: 'Unsubscribe',
    OsLiteRegistration: 'OsLiteRegistration',
    OsLiteState: 'OsLiteState',
    OsLiteSalesPersons: 'OsLiteSalesPersons'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    news: number
  }

  export type UserCountOutputTypeSelect = {
    news?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type SchoolsCountOutputType
   */


  export type SchoolsCountOutputType = {
    payment: number
  }

  export type SchoolsCountOutputTypeSelect = {
    payment?: boolean
  }

  export type SchoolsCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SchoolsCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SchoolsCountOutputType
    : S extends undefined
    ? never
    : S extends SchoolsCountOutputTypeArgs
    ?'include' extends U
    ? SchoolsCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SchoolsCountOutputType ? SchoolsCountOutputType[P] : never
  } 
    : SchoolsCountOutputType
  : SchoolsCountOutputType




  // Custom InputTypes

  /**
   * SchoolsCountOutputType without action
   */
  export type SchoolsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SchoolsCountOutputType
     * 
    **/
    select?: SchoolsCountOutputTypeSelect | null
  }



  /**
   * Count Type OsLiteStateCountOutputType
   */


  export type OsLiteStateCountOutputType = {
    oslitePersons: number
  }

  export type OsLiteStateCountOutputTypeSelect = {
    oslitePersons?: boolean
  }

  export type OsLiteStateCountOutputTypeGetPayload<
    S extends boolean | null | undefined | OsLiteStateCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? OsLiteStateCountOutputType
    : S extends undefined
    ? never
    : S extends OsLiteStateCountOutputTypeArgs
    ?'include' extends U
    ? OsLiteStateCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OsLiteStateCountOutputType ? OsLiteStateCountOutputType[P] : never
  } 
    : OsLiteStateCountOutputType
  : OsLiteStateCountOutputType




  // Custom InputTypes

  /**
   * OsLiteStateCountOutputType without action
   */
  export type OsLiteStateCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the OsLiteStateCountOutputType
     * 
    **/
    select?: OsLiteStateCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model News
   */


  export type AggregateNews = {
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  export type NewsAvgAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type NewsSumAggregateOutputType = {
    id: number | null
    createdBy: number | null
  }

  export type NewsMinAggregateOutputType = {
    id: number | null
    headline: string | null
    desc: string | null
    date: string | null
    link: string | null
    imgUrl: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsMaxAggregateOutputType = {
    id: number | null
    headline: string | null
    desc: string | null
    date: string | null
    link: string | null
    imgUrl: string | null
    createdBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsCountAggregateOutputType = {
    id: number
    headline: number
    desc: number
    date: number
    link: number
    imgUrl: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NewsAvgAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type NewsSumAggregateInputType = {
    id?: true
    createdBy?: true
  }

  export type NewsMinAggregateInputType = {
    id?: true
    headline?: true
    desc?: true
    date?: true
    link?: true
    imgUrl?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsMaxAggregateInputType = {
    id?: true
    headline?: true
    desc?: true
    date?: true
    link?: true
    imgUrl?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsCountAggregateInputType = {
    id?: true
    headline?: true
    desc?: true
    date?: true
    link?: true
    imgUrl?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NewsAggregateArgs = {
    /**
     * Filter which News to aggregate.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned News
    **/
    _count?: true | NewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsMaxAggregateInputType
  }

  export type GetNewsAggregateType<T extends NewsAggregateArgs> = {
        [P in keyof T & keyof AggregateNews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNews[P]>
      : GetScalarType<T[P], AggregateNews[P]>
  }




  export type NewsGroupByArgs = {
    where?: NewsWhereInput
    orderBy?: Enumerable<NewsOrderByWithAggregationInput>
    by: Array<NewsScalarFieldEnum>
    having?: NewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsCountAggregateInputType | true
    _avg?: NewsAvgAggregateInputType
    _sum?: NewsSumAggregateInputType
    _min?: NewsMinAggregateInputType
    _max?: NewsMaxAggregateInputType
  }


  export type NewsGroupByOutputType = {
    id: number
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdBy: number
    createdAt: Date
    updatedAt: Date
    _count: NewsCountAggregateOutputType | null
    _avg: NewsAvgAggregateOutputType | null
    _sum: NewsSumAggregateOutputType | null
    _min: NewsMinAggregateOutputType | null
    _max: NewsMaxAggregateOutputType | null
  }

  type GetNewsGroupByPayload<T extends NewsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<NewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsGroupByOutputType[P]>
            : GetScalarType<T[P], NewsGroupByOutputType[P]>
        }
      >
    >


  export type NewsSelect = {
    id?: boolean
    headline?: boolean
    desc?: boolean
    date?: boolean
    link?: boolean
    imgUrl?: boolean
    user?: boolean | UserArgs
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NewsInclude = {
    user?: boolean | UserArgs
  }

  export type NewsGetPayload<
    S extends boolean | null | undefined | NewsArgs,
    U = keyof S
      > = S extends true
        ? News
    : S extends undefined
    ? never
    : S extends NewsArgs | NewsFindManyArgs
    ?'include' extends U
    ? News  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof News ? News[P] : never
  } 
    : News
  : News


  type NewsCountArgs = Merge<
    Omit<NewsFindManyArgs, 'select' | 'include'> & {
      select?: NewsCountAggregateInputType | true
    }
  >

  export interface NewsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one News that matches the filter.
     * @param {NewsFindUniqueArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NewsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, NewsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'News'> extends True ? CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>> : CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>

    /**
     * Find the first News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindFirstArgs} args - Arguments to find a News
     * @example
     * // Get one News
     * const news = await prisma.news.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NewsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, NewsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'News'> extends True ? CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>> : CheckSelect<T, Prisma__NewsClient<News | null >, Prisma__NewsClient<NewsGetPayload<T> | null >>

    /**
     * Find zero or more News that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all News
     * const news = await prisma.news.findMany()
     * 
     * // Get first 10 News
     * const news = await prisma.news.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsWithIdOnly = await prisma.news.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NewsFindManyArgs>(
      args?: SelectSubset<T, NewsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<News>>, PrismaPromise<Array<NewsGetPayload<T>>>>

    /**
     * Create a News.
     * @param {NewsCreateArgs} args - Arguments to create a News.
     * @example
     * // Create one News
     * const News = await prisma.news.create({
     *   data: {
     *     // ... data to create a News
     *   }
     * })
     * 
    **/
    create<T extends NewsCreateArgs>(
      args: SelectSubset<T, NewsCreateArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Create many News.
     *     @param {NewsCreateManyArgs} args - Arguments to create many News.
     *     @example
     *     // Create many News
     *     const news = await prisma.news.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NewsCreateManyArgs>(
      args?: SelectSubset<T, NewsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a News.
     * @param {NewsDeleteArgs} args - Arguments to delete one News.
     * @example
     * // Delete one News
     * const News = await prisma.news.delete({
     *   where: {
     *     // ... filter to delete one News
     *   }
     * })
     * 
    **/
    delete<T extends NewsDeleteArgs>(
      args: SelectSubset<T, NewsDeleteArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Update one News.
     * @param {NewsUpdateArgs} args - Arguments to update one News.
     * @example
     * // Update one News
     * const news = await prisma.news.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NewsUpdateArgs>(
      args: SelectSubset<T, NewsUpdateArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Delete zero or more News.
     * @param {NewsDeleteManyArgs} args - Arguments to filter News to delete.
     * @example
     * // Delete a few News
     * const { count } = await prisma.news.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NewsDeleteManyArgs>(
      args?: SelectSubset<T, NewsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many News
     * const news = await prisma.news.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NewsUpdateManyArgs>(
      args: SelectSubset<T, NewsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one News.
     * @param {NewsUpsertArgs} args - Arguments to update or create a News.
     * @example
     * // Update or create a News
     * const news = await prisma.news.upsert({
     *   create: {
     *     // ... data to create a News
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the News we want to update
     *   }
     * })
    **/
    upsert<T extends NewsUpsertArgs>(
      args: SelectSubset<T, NewsUpsertArgs>
    ): CheckSelect<T, Prisma__NewsClient<News>, Prisma__NewsClient<NewsGetPayload<T>>>

    /**
     * Count the number of News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsCountArgs} args - Arguments to filter News to count.
     * @example
     * // Count the number of News
     * const count = await prisma.news.count({
     *   where: {
     *     // ... the filter for the News we want to count
     *   }
     * })
    **/
    count<T extends NewsCountArgs>(
      args?: Subset<T, NewsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsAggregateArgs>(args: Subset<T, NewsAggregateArgs>): PrismaPromise<GetNewsAggregateType<T>>

    /**
     * Group by News.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsGroupByArgs['orderBy'] }
        : { orderBy?: NewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for News.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NewsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * News findUnique
   */
  export type NewsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Throw an Error if a News can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which News to fetch.
     * 
    **/
    where: NewsWhereUniqueInput
  }


  /**
   * News findFirst
   */
  export type NewsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Throw an Error if a News can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which News to fetch.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for News.
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of News.
     * 
    **/
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News findMany
   */
  export type NewsFindManyArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter, which News to fetch.
     * 
    **/
    where?: NewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of News to fetch.
     * 
    **/
    orderBy?: Enumerable<NewsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing News.
     * 
    **/
    cursor?: NewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` News from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` News.
     * 
    **/
    skip?: number
    distinct?: Enumerable<NewsScalarFieldEnum>
  }


  /**
   * News create
   */
  export type NewsCreateArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The data needed to create a News.
     * 
    **/
    data: XOR<NewsCreateInput, NewsUncheckedCreateInput>
  }


  /**
   * News createMany
   */
  export type NewsCreateManyArgs = {
    /**
     * The data used to create many News.
     * 
    **/
    data: Enumerable<NewsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * News update
   */
  export type NewsUpdateArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The data needed to update a News.
     * 
    **/
    data: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
    /**
     * Choose, which News to update.
     * 
    **/
    where: NewsWhereUniqueInput
  }


  /**
   * News updateMany
   */
  export type NewsUpdateManyArgs = {
    /**
     * The data used to update News.
     * 
    **/
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyInput>
    /**
     * Filter which News to update
     * 
    **/
    where?: NewsWhereInput
  }


  /**
   * News upsert
   */
  export type NewsUpsertArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * The filter to search for the News to update in case it exists.
     * 
    **/
    where: NewsWhereUniqueInput
    /**
     * In case the News found by the `where` argument doesn't exist, create a new News with this data.
     * 
    **/
    create: XOR<NewsCreateInput, NewsUncheckedCreateInput>
    /**
     * In case the News was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<NewsUpdateInput, NewsUncheckedUpdateInput>
  }


  /**
   * News delete
   */
  export type NewsDeleteArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
    /**
     * Filter which News to delete.
     * 
    **/
    where: NewsWhereUniqueInput
  }


  /**
   * News deleteMany
   */
  export type NewsDeleteManyArgs = {
    /**
     * Filter which News to delete
     * 
    **/
    where?: NewsWhereInput
  }


  /**
   * News without action
   */
  export type NewsArgs = {
    /**
     * Select specific fields to fetch from the News
     * 
    **/
    select?: NewsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: NewsInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    email: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    username: string
    email: string
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    news?: boolean | NewsFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    news?: boolean | NewsFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'news' ? Array < NewsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'news' ? Array < NewsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    news<T extends NewsFindManyArgs = {}>(args?: Subset<T, NewsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<News>>, PrismaPromise<Array<NewsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Payment
   */


  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    id: number | null
    class: number | null
    SchoolId: number | null
  }

  export type PaymentSumAggregateOutputType = {
    id: number | null
    class: number | null
    SchoolId: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: number | null
    userName: string | null
    email: string | null
    phone: string | null
    paymentID: string | null
    parentName: string | null
    class: number | null
    section: string | null
    SchoolId: number | null
    orderid: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: number | null
    userName: string | null
    email: string | null
    phone: string | null
    paymentID: string | null
    parentName: string | null
    class: number | null
    section: string | null
    SchoolId: number | null
    orderid: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userName: number
    email: number
    phone: number
    paymentID: number
    parentName: number
    class: number
    section: number
    SchoolId: number
    orderid: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    id?: true
    class?: true
    SchoolId?: true
  }

  export type PaymentSumAggregateInputType = {
    id?: true
    class?: true
    SchoolId?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    phone?: true
    paymentID?: true
    parentName?: true
    class?: true
    section?: true
    SchoolId?: true
    orderid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    phone?: true
    paymentID?: true
    parentName?: true
    class?: true
    section?: true
    SchoolId?: true
    orderid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userName?: true
    email?: true
    phone?: true
    paymentID?: true
    parentName?: true
    class?: true
    section?: true
    SchoolId?: true
    orderid?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs = {
    /**
     * Filter which Payment to aggregate.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs = {
    where?: PaymentWhereInput
    orderBy?: Enumerable<PaymentOrderByWithAggregationInput>
    by: Array<PaymentScalarFieldEnum>
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }


  export type PaymentGroupByOutputType = {
    id: number
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    SchoolId: number
    orderid: string | null
    status: string | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect = {
    id?: boolean
    userName?: boolean
    email?: boolean
    phone?: boolean
    paymentID?: boolean
    parentName?: boolean
    class?: boolean
    section?: boolean
    school?: boolean | SchoolsArgs
    SchoolId?: boolean
    orderid?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentInclude = {
    school?: boolean | SchoolsArgs
  }

  export type PaymentGetPayload<
    S extends boolean | null | undefined | PaymentArgs,
    U = keyof S
      > = S extends true
        ? Payment
    : S extends undefined
    ? never
    : S extends PaymentArgs | PaymentFindManyArgs
    ?'include' extends U
    ? Payment  & {
    [P in TrueKeys<S['include']>]:
        P extends 'school' ? SchoolsGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'school' ? SchoolsGetPayload<S['select'][P]> :  P extends keyof Payment ? Payment[P] : never
  } 
    : Payment
  : Payment


  type PaymentCountArgs = Merge<
    Omit<PaymentFindManyArgs, 'select' | 'include'> & {
      select?: PaymentCountAggregateInputType | true
    }
  >

  export interface PaymentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PaymentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PaymentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null >, Prisma__PaymentClient<PaymentGetPayload<T> | null >>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PaymentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PaymentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Payment'> extends True ? CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>> : CheckSelect<T, Prisma__PaymentClient<Payment | null >, Prisma__PaymentClient<PaymentGetPayload<T> | null >>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PaymentFindManyArgs>(
      args?: SelectSubset<T, PaymentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Payment>>, PrismaPromise<Array<PaymentGetPayload<T>>>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
    **/
    create<T extends PaymentCreateArgs>(
      args: SelectSubset<T, PaymentCreateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Create many Payments.
     *     @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     *     @example
     *     // Create many Payments
     *     const payment = await prisma.payment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PaymentCreateManyArgs>(
      args?: SelectSubset<T, PaymentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
    **/
    delete<T extends PaymentDeleteArgs>(
      args: SelectSubset<T, PaymentDeleteArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PaymentUpdateArgs>(
      args: SelectSubset<T, PaymentUpdateArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PaymentDeleteManyArgs>(
      args?: SelectSubset<T, PaymentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PaymentUpdateManyArgs>(
      args: SelectSubset<T, PaymentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
    **/
    upsert<T extends PaymentUpsertArgs>(
      args: SelectSubset<T, PaymentUpsertArgs>
    ): CheckSelect<T, Prisma__PaymentClient<Payment>, Prisma__PaymentClient<PaymentGetPayload<T>>>

    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PaymentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    school<T extends SchoolsArgs = {}>(args?: Subset<T, SchoolsArgs>): CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Throw an Error if a Payment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Throw an Error if a Payment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Payment to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     * 
    **/
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter, which Payments to fetch.
     * 
    **/
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     * 
    **/
    orderBy?: Enumerable<PaymentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     * 
    **/
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PaymentScalarFieldEnum>
  }


  /**
   * Payment create
   */
  export type PaymentCreateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to create a Payment.
     * 
    **/
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }


  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs = {
    /**
     * The data used to create many Payments.
     * 
    **/
    data: Enumerable<PaymentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Payment update
   */
  export type PaymentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The data needed to update a Payment.
     * 
    **/
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs = {
    /**
     * The data used to update Payments.
     * 
    **/
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * The filter to search for the Payment to update in case it exists.
     * 
    **/
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     * 
    **/
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }


  /**
   * Payment delete
   */
  export type PaymentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
    /**
     * Filter which Payment to delete.
     * 
    **/
    where: PaymentWhereUniqueInput
  }


  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs = {
    /**
     * Filter which Payments to delete
     * 
    **/
    where?: PaymentWhereInput
  }


  /**
   * Payment without action
   */
  export type PaymentArgs = {
    /**
     * Select specific fields to fetch from the Payment
     * 
    **/
    select?: PaymentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PaymentInclude | null
  }



  /**
   * Model Schools
   */


  export type AggregateSchools = {
    _count: SchoolsCountAggregateOutputType | null
    _avg: SchoolsAvgAggregateOutputType | null
    _sum: SchoolsSumAggregateOutputType | null
    _min: SchoolsMinAggregateOutputType | null
    _max: SchoolsMaxAggregateOutputType | null
  }

  export type SchoolsAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type SchoolsSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type SchoolsMinAggregateOutputType = {
    id: number | null
    name: string | null
    state: string | null
    city: string | null
    coupon: string | null
    price: number | null
  }

  export type SchoolsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    state: string | null
    city: string | null
    coupon: string | null
    price: number | null
  }

  export type SchoolsCountAggregateOutputType = {
    id: number
    name: number
    state: number
    city: number
    coupon: number
    price: number
    _all: number
  }


  export type SchoolsAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type SchoolsSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type SchoolsMinAggregateInputType = {
    id?: true
    name?: true
    state?: true
    city?: true
    coupon?: true
    price?: true
  }

  export type SchoolsMaxAggregateInputType = {
    id?: true
    name?: true
    state?: true
    city?: true
    coupon?: true
    price?: true
  }

  export type SchoolsCountAggregateInputType = {
    id?: true
    name?: true
    state?: true
    city?: true
    coupon?: true
    price?: true
    _all?: true
  }

  export type SchoolsAggregateArgs = {
    /**
     * Filter which Schools to aggregate.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolsMaxAggregateInputType
  }

  export type GetSchoolsAggregateType<T extends SchoolsAggregateArgs> = {
        [P in keyof T & keyof AggregateSchools]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchools[P]>
      : GetScalarType<T[P], AggregateSchools[P]>
  }




  export type SchoolsGroupByArgs = {
    where?: SchoolsWhereInput
    orderBy?: Enumerable<SchoolsOrderByWithAggregationInput>
    by: Array<SchoolsScalarFieldEnum>
    having?: SchoolsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolsCountAggregateInputType | true
    _avg?: SchoolsAvgAggregateInputType
    _sum?: SchoolsSumAggregateInputType
    _min?: SchoolsMinAggregateInputType
    _max?: SchoolsMaxAggregateInputType
  }


  export type SchoolsGroupByOutputType = {
    id: number
    name: string
    state: string
    city: string
    coupon: string
    price: number
    _count: SchoolsCountAggregateOutputType | null
    _avg: SchoolsAvgAggregateOutputType | null
    _sum: SchoolsSumAggregateOutputType | null
    _min: SchoolsMinAggregateOutputType | null
    _max: SchoolsMaxAggregateOutputType | null
  }

  type GetSchoolsGroupByPayload<T extends SchoolsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SchoolsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolsGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolsGroupByOutputType[P]>
        }
      >
    >


  export type SchoolsSelect = {
    id?: boolean
    name?: boolean
    state?: boolean
    city?: boolean
    payment?: boolean | PaymentFindManyArgs
    coupon?: boolean
    price?: boolean
    _count?: boolean | SchoolsCountOutputTypeArgs
  }

  export type SchoolsInclude = {
    payment?: boolean | PaymentFindManyArgs
    _count?: boolean | SchoolsCountOutputTypeArgs
  }

  export type SchoolsGetPayload<
    S extends boolean | null | undefined | SchoolsArgs,
    U = keyof S
      > = S extends true
        ? Schools
    : S extends undefined
    ? never
    : S extends SchoolsArgs | SchoolsFindManyArgs
    ?'include' extends U
    ? Schools  & {
    [P in TrueKeys<S['include']>]:
        P extends 'payment' ? Array < PaymentGetPayload<S['include'][P]>>  :
        P extends '_count' ? SchoolsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'payment' ? Array < PaymentGetPayload<S['select'][P]>>  :
        P extends '_count' ? SchoolsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Schools ? Schools[P] : never
  } 
    : Schools
  : Schools


  type SchoolsCountArgs = Merge<
    Omit<SchoolsFindManyArgs, 'select' | 'include'> & {
      select?: SchoolsCountAggregateInputType | true
    }
  >

  export interface SchoolsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Schools that matches the filter.
     * @param {SchoolsFindUniqueArgs} args - Arguments to find a Schools
     * @example
     * // Get one Schools
     * const schools = await prisma.schools.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SchoolsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SchoolsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Schools'> extends True ? CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>> : CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>

    /**
     * Find the first Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsFindFirstArgs} args - Arguments to find a Schools
     * @example
     * // Get one Schools
     * const schools = await prisma.schools.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SchoolsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SchoolsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Schools'> extends True ? CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>> : CheckSelect<T, Prisma__SchoolsClient<Schools | null >, Prisma__SchoolsClient<SchoolsGetPayload<T> | null >>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.schools.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.schools.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolsWithIdOnly = await prisma.schools.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SchoolsFindManyArgs>(
      args?: SelectSubset<T, SchoolsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Schools>>, PrismaPromise<Array<SchoolsGetPayload<T>>>>

    /**
     * Create a Schools.
     * @param {SchoolsCreateArgs} args - Arguments to create a Schools.
     * @example
     * // Create one Schools
     * const Schools = await prisma.schools.create({
     *   data: {
     *     // ... data to create a Schools
     *   }
     * })
     * 
    **/
    create<T extends SchoolsCreateArgs>(
      args: SelectSubset<T, SchoolsCreateArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Create many Schools.
     *     @param {SchoolsCreateManyArgs} args - Arguments to create many Schools.
     *     @example
     *     // Create many Schools
     *     const schools = await prisma.schools.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SchoolsCreateManyArgs>(
      args?: SelectSubset<T, SchoolsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Schools.
     * @param {SchoolsDeleteArgs} args - Arguments to delete one Schools.
     * @example
     * // Delete one Schools
     * const Schools = await prisma.schools.delete({
     *   where: {
     *     // ... filter to delete one Schools
     *   }
     * })
     * 
    **/
    delete<T extends SchoolsDeleteArgs>(
      args: SelectSubset<T, SchoolsDeleteArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Update one Schools.
     * @param {SchoolsUpdateArgs} args - Arguments to update one Schools.
     * @example
     * // Update one Schools
     * const schools = await prisma.schools.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SchoolsUpdateArgs>(
      args: SelectSubset<T, SchoolsUpdateArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Delete zero or more Schools.
     * @param {SchoolsDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.schools.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SchoolsDeleteManyArgs>(
      args?: SelectSubset<T, SchoolsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const schools = await prisma.schools.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SchoolsUpdateManyArgs>(
      args: SelectSubset<T, SchoolsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Schools.
     * @param {SchoolsUpsertArgs} args - Arguments to update or create a Schools.
     * @example
     * // Update or create a Schools
     * const schools = await prisma.schools.upsert({
     *   create: {
     *     // ... data to create a Schools
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schools we want to update
     *   }
     * })
    **/
    upsert<T extends SchoolsUpsertArgs>(
      args: SelectSubset<T, SchoolsUpsertArgs>
    ): CheckSelect<T, Prisma__SchoolsClient<Schools>, Prisma__SchoolsClient<SchoolsGetPayload<T>>>

    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.schools.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolsCountArgs>(
      args?: Subset<T, SchoolsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolsAggregateArgs>(args: Subset<T, SchoolsAggregateArgs>): PrismaPromise<GetSchoolsAggregateType<T>>

    /**
     * Group by Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolsGroupByArgs['orderBy'] }
        : { orderBy?: SchoolsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schools.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SchoolsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    payment<T extends PaymentFindManyArgs = {}>(args?: Subset<T, PaymentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Payment>>, PrismaPromise<Array<PaymentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Schools findUnique
   */
  export type SchoolsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Throw an Error if a Schools can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools findFirst
   */
  export type SchoolsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Throw an Error if a Schools can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     * 
    **/
    distinct?: Enumerable<SchoolsScalarFieldEnum>
  }


  /**
   * Schools findMany
   */
  export type SchoolsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Filter, which Schools to fetch.
     * 
    **/
    where?: SchoolsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     * 
    **/
    orderBy?: Enumerable<SchoolsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     * 
    **/
    cursor?: SchoolsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SchoolsScalarFieldEnum>
  }


  /**
   * Schools create
   */
  export type SchoolsCreateArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The data needed to create a Schools.
     * 
    **/
    data: XOR<SchoolsCreateInput, SchoolsUncheckedCreateInput>
  }


  /**
   * Schools createMany
   */
  export type SchoolsCreateManyArgs = {
    /**
     * The data used to create many Schools.
     * 
    **/
    data: Enumerable<SchoolsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Schools update
   */
  export type SchoolsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The data needed to update a Schools.
     * 
    **/
    data: XOR<SchoolsUpdateInput, SchoolsUncheckedUpdateInput>
    /**
     * Choose, which Schools to update.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools updateMany
   */
  export type SchoolsUpdateManyArgs = {
    /**
     * The data used to update Schools.
     * 
    **/
    data: XOR<SchoolsUpdateManyMutationInput, SchoolsUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     * 
    **/
    where?: SchoolsWhereInput
  }


  /**
   * Schools upsert
   */
  export type SchoolsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * The filter to search for the Schools to update in case it exists.
     * 
    **/
    where: SchoolsWhereUniqueInput
    /**
     * In case the Schools found by the `where` argument doesn't exist, create a new Schools with this data.
     * 
    **/
    create: XOR<SchoolsCreateInput, SchoolsUncheckedCreateInput>
    /**
     * In case the Schools was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SchoolsUpdateInput, SchoolsUncheckedUpdateInput>
  }


  /**
   * Schools delete
   */
  export type SchoolsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
    /**
     * Filter which Schools to delete.
     * 
    **/
    where: SchoolsWhereUniqueInput
  }


  /**
   * Schools deleteMany
   */
  export type SchoolsDeleteManyArgs = {
    /**
     * Filter which Schools to delete
     * 
    **/
    where?: SchoolsWhereInput
  }


  /**
   * Schools without action
   */
  export type SchoolsArgs = {
    /**
     * Select specific fields to fetch from the Schools
     * 
    **/
    select?: SchoolsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SchoolsInclude | null
  }



  /**
   * Model Unsubscribe
   */


  export type AggregateUnsubscribe = {
    _count: UnsubscribeCountAggregateOutputType | null
    _avg: UnsubscribeAvgAggregateOutputType | null
    _sum: UnsubscribeSumAggregateOutputType | null
    _min: UnsubscribeMinAggregateOutputType | null
    _max: UnsubscribeMaxAggregateOutputType | null
  }

  export type UnsubscribeAvgAggregateOutputType = {
    id: number | null
  }

  export type UnsubscribeSumAggregateOutputType = {
    id: number | null
  }

  export type UnsubscribeMinAggregateOutputType = {
    id: number | null
    email: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnsubscribeMaxAggregateOutputType = {
    id: number | null
    email: string | null
    status: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UnsubscribeCountAggregateOutputType = {
    id: number
    email: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UnsubscribeAvgAggregateInputType = {
    id?: true
  }

  export type UnsubscribeSumAggregateInputType = {
    id?: true
  }

  export type UnsubscribeMinAggregateInputType = {
    id?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnsubscribeMaxAggregateInputType = {
    id?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UnsubscribeCountAggregateInputType = {
    id?: true
    email?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UnsubscribeAggregateArgs = {
    /**
     * Filter which Unsubscribe to aggregate.
     * 
    **/
    where?: UnsubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unsubscribes to fetch.
     * 
    **/
    orderBy?: Enumerable<UnsubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UnsubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unsubscribes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unsubscribes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Unsubscribes
    **/
    _count?: true | UnsubscribeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UnsubscribeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UnsubscribeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnsubscribeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnsubscribeMaxAggregateInputType
  }

  export type GetUnsubscribeAggregateType<T extends UnsubscribeAggregateArgs> = {
        [P in keyof T & keyof AggregateUnsubscribe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnsubscribe[P]>
      : GetScalarType<T[P], AggregateUnsubscribe[P]>
  }




  export type UnsubscribeGroupByArgs = {
    where?: UnsubscribeWhereInput
    orderBy?: Enumerable<UnsubscribeOrderByWithAggregationInput>
    by: Array<UnsubscribeScalarFieldEnum>
    having?: UnsubscribeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnsubscribeCountAggregateInputType | true
    _avg?: UnsubscribeAvgAggregateInputType
    _sum?: UnsubscribeSumAggregateInputType
    _min?: UnsubscribeMinAggregateInputType
    _max?: UnsubscribeMaxAggregateInputType
  }


  export type UnsubscribeGroupByOutputType = {
    id: number
    email: string
    status: boolean
    createdAt: Date
    updatedAt: Date
    _count: UnsubscribeCountAggregateOutputType | null
    _avg: UnsubscribeAvgAggregateOutputType | null
    _sum: UnsubscribeSumAggregateOutputType | null
    _min: UnsubscribeMinAggregateOutputType | null
    _max: UnsubscribeMaxAggregateOutputType | null
  }

  type GetUnsubscribeGroupByPayload<T extends UnsubscribeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UnsubscribeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnsubscribeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnsubscribeGroupByOutputType[P]>
            : GetScalarType<T[P], UnsubscribeGroupByOutputType[P]>
        }
      >
    >


  export type UnsubscribeSelect = {
    id?: boolean
    email?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UnsubscribeGetPayload<
    S extends boolean | null | undefined | UnsubscribeArgs,
    U = keyof S
      > = S extends true
        ? Unsubscribe
    : S extends undefined
    ? never
    : S extends UnsubscribeArgs | UnsubscribeFindManyArgs
    ?'include' extends U
    ? Unsubscribe 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Unsubscribe ? Unsubscribe[P] : never
  } 
    : Unsubscribe
  : Unsubscribe


  type UnsubscribeCountArgs = Merge<
    Omit<UnsubscribeFindManyArgs, 'select' | 'include'> & {
      select?: UnsubscribeCountAggregateInputType | true
    }
  >

  export interface UnsubscribeDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Unsubscribe that matches the filter.
     * @param {UnsubscribeFindUniqueArgs} args - Arguments to find a Unsubscribe
     * @example
     * // Get one Unsubscribe
     * const unsubscribe = await prisma.unsubscribe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UnsubscribeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UnsubscribeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Unsubscribe'> extends True ? CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>> : CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe | null >, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T> | null >>

    /**
     * Find the first Unsubscribe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeFindFirstArgs} args - Arguments to find a Unsubscribe
     * @example
     * // Get one Unsubscribe
     * const unsubscribe = await prisma.unsubscribe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UnsubscribeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UnsubscribeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Unsubscribe'> extends True ? CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>> : CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe | null >, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T> | null >>

    /**
     * Find zero or more Unsubscribes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Unsubscribes
     * const unsubscribes = await prisma.unsubscribe.findMany()
     * 
     * // Get first 10 Unsubscribes
     * const unsubscribes = await prisma.unsubscribe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unsubscribeWithIdOnly = await prisma.unsubscribe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UnsubscribeFindManyArgs>(
      args?: SelectSubset<T, UnsubscribeFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Unsubscribe>>, PrismaPromise<Array<UnsubscribeGetPayload<T>>>>

    /**
     * Create a Unsubscribe.
     * @param {UnsubscribeCreateArgs} args - Arguments to create a Unsubscribe.
     * @example
     * // Create one Unsubscribe
     * const Unsubscribe = await prisma.unsubscribe.create({
     *   data: {
     *     // ... data to create a Unsubscribe
     *   }
     * })
     * 
    **/
    create<T extends UnsubscribeCreateArgs>(
      args: SelectSubset<T, UnsubscribeCreateArgs>
    ): CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>>

    /**
     * Create many Unsubscribes.
     *     @param {UnsubscribeCreateManyArgs} args - Arguments to create many Unsubscribes.
     *     @example
     *     // Create many Unsubscribes
     *     const unsubscribe = await prisma.unsubscribe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UnsubscribeCreateManyArgs>(
      args?: SelectSubset<T, UnsubscribeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Unsubscribe.
     * @param {UnsubscribeDeleteArgs} args - Arguments to delete one Unsubscribe.
     * @example
     * // Delete one Unsubscribe
     * const Unsubscribe = await prisma.unsubscribe.delete({
     *   where: {
     *     // ... filter to delete one Unsubscribe
     *   }
     * })
     * 
    **/
    delete<T extends UnsubscribeDeleteArgs>(
      args: SelectSubset<T, UnsubscribeDeleteArgs>
    ): CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>>

    /**
     * Update one Unsubscribe.
     * @param {UnsubscribeUpdateArgs} args - Arguments to update one Unsubscribe.
     * @example
     * // Update one Unsubscribe
     * const unsubscribe = await prisma.unsubscribe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UnsubscribeUpdateArgs>(
      args: SelectSubset<T, UnsubscribeUpdateArgs>
    ): CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>>

    /**
     * Delete zero or more Unsubscribes.
     * @param {UnsubscribeDeleteManyArgs} args - Arguments to filter Unsubscribes to delete.
     * @example
     * // Delete a few Unsubscribes
     * const { count } = await prisma.unsubscribe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UnsubscribeDeleteManyArgs>(
      args?: SelectSubset<T, UnsubscribeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Unsubscribes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Unsubscribes
     * const unsubscribe = await prisma.unsubscribe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UnsubscribeUpdateManyArgs>(
      args: SelectSubset<T, UnsubscribeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Unsubscribe.
     * @param {UnsubscribeUpsertArgs} args - Arguments to update or create a Unsubscribe.
     * @example
     * // Update or create a Unsubscribe
     * const unsubscribe = await prisma.unsubscribe.upsert({
     *   create: {
     *     // ... data to create a Unsubscribe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Unsubscribe we want to update
     *   }
     * })
    **/
    upsert<T extends UnsubscribeUpsertArgs>(
      args: SelectSubset<T, UnsubscribeUpsertArgs>
    ): CheckSelect<T, Prisma__UnsubscribeClient<Unsubscribe>, Prisma__UnsubscribeClient<UnsubscribeGetPayload<T>>>

    /**
     * Count the number of Unsubscribes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeCountArgs} args - Arguments to filter Unsubscribes to count.
     * @example
     * // Count the number of Unsubscribes
     * const count = await prisma.unsubscribe.count({
     *   where: {
     *     // ... the filter for the Unsubscribes we want to count
     *   }
     * })
    **/
    count<T extends UnsubscribeCountArgs>(
      args?: Subset<T, UnsubscribeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnsubscribeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Unsubscribe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnsubscribeAggregateArgs>(args: Subset<T, UnsubscribeAggregateArgs>): PrismaPromise<GetUnsubscribeAggregateType<T>>

    /**
     * Group by Unsubscribe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnsubscribeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnsubscribeGroupByArgs['orderBy'] }
        : { orderBy?: UnsubscribeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnsubscribeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnsubscribeGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Unsubscribe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UnsubscribeClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Unsubscribe findUnique
   */
  export type UnsubscribeFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * Throw an Error if a Unsubscribe can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Unsubscribe to fetch.
     * 
    **/
    where: UnsubscribeWhereUniqueInput
  }


  /**
   * Unsubscribe findFirst
   */
  export type UnsubscribeFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * Throw an Error if a Unsubscribe can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Unsubscribe to fetch.
     * 
    **/
    where?: UnsubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unsubscribes to fetch.
     * 
    **/
    orderBy?: Enumerable<UnsubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Unsubscribes.
     * 
    **/
    cursor?: UnsubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unsubscribes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unsubscribes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Unsubscribes.
     * 
    **/
    distinct?: Enumerable<UnsubscribeScalarFieldEnum>
  }


  /**
   * Unsubscribe findMany
   */
  export type UnsubscribeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * Filter, which Unsubscribes to fetch.
     * 
    **/
    where?: UnsubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Unsubscribes to fetch.
     * 
    **/
    orderBy?: Enumerable<UnsubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Unsubscribes.
     * 
    **/
    cursor?: UnsubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Unsubscribes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Unsubscribes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UnsubscribeScalarFieldEnum>
  }


  /**
   * Unsubscribe create
   */
  export type UnsubscribeCreateArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * The data needed to create a Unsubscribe.
     * 
    **/
    data: XOR<UnsubscribeCreateInput, UnsubscribeUncheckedCreateInput>
  }


  /**
   * Unsubscribe createMany
   */
  export type UnsubscribeCreateManyArgs = {
    /**
     * The data used to create many Unsubscribes.
     * 
    **/
    data: Enumerable<UnsubscribeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Unsubscribe update
   */
  export type UnsubscribeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * The data needed to update a Unsubscribe.
     * 
    **/
    data: XOR<UnsubscribeUpdateInput, UnsubscribeUncheckedUpdateInput>
    /**
     * Choose, which Unsubscribe to update.
     * 
    **/
    where: UnsubscribeWhereUniqueInput
  }


  /**
   * Unsubscribe updateMany
   */
  export type UnsubscribeUpdateManyArgs = {
    /**
     * The data used to update Unsubscribes.
     * 
    **/
    data: XOR<UnsubscribeUpdateManyMutationInput, UnsubscribeUncheckedUpdateManyInput>
    /**
     * Filter which Unsubscribes to update
     * 
    **/
    where?: UnsubscribeWhereInput
  }


  /**
   * Unsubscribe upsert
   */
  export type UnsubscribeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * The filter to search for the Unsubscribe to update in case it exists.
     * 
    **/
    where: UnsubscribeWhereUniqueInput
    /**
     * In case the Unsubscribe found by the `where` argument doesn't exist, create a new Unsubscribe with this data.
     * 
    **/
    create: XOR<UnsubscribeCreateInput, UnsubscribeUncheckedCreateInput>
    /**
     * In case the Unsubscribe was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UnsubscribeUpdateInput, UnsubscribeUncheckedUpdateInput>
  }


  /**
   * Unsubscribe delete
   */
  export type UnsubscribeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
    /**
     * Filter which Unsubscribe to delete.
     * 
    **/
    where: UnsubscribeWhereUniqueInput
  }


  /**
   * Unsubscribe deleteMany
   */
  export type UnsubscribeDeleteManyArgs = {
    /**
     * Filter which Unsubscribes to delete
     * 
    **/
    where?: UnsubscribeWhereInput
  }


  /**
   * Unsubscribe without action
   */
  export type UnsubscribeArgs = {
    /**
     * Select specific fields to fetch from the Unsubscribe
     * 
    **/
    select?: UnsubscribeSelect | null
  }



  /**
   * Model OsLiteRegistration
   */


  export type AggregateOsLiteRegistration = {
    _count: OsLiteRegistrationCountAggregateOutputType | null
    _avg: OsLiteRegistrationAvgAggregateOutputType | null
    _sum: OsLiteRegistrationSumAggregateOutputType | null
    _min: OsLiteRegistrationMinAggregateOutputType | null
    _max: OsLiteRegistrationMaxAggregateOutputType | null
  }

  export type OsLiteRegistrationAvgAggregateOutputType = {
    id: number | null
  }

  export type OsLiteRegistrationSumAggregateOutputType = {
    id: number | null
  }

  export type OsLiteRegistrationMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    Designation: string | null
    email: string | null
    mobile: string | null
    schoolName: string | null
    eupheusSales: string | null
    state: string | null
    city: string | null
    dateOfWebinar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteRegistrationMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    Designation: string | null
    email: string | null
    mobile: string | null
    schoolName: string | null
    eupheusSales: string | null
    state: string | null
    city: string | null
    dateOfWebinar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteRegistrationCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    Designation: number
    email: number
    mobile: number
    schoolName: number
    eupheusSales: number
    state: number
    city: number
    dateOfWebinar: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OsLiteRegistrationAvgAggregateInputType = {
    id?: true
  }

  export type OsLiteRegistrationSumAggregateInputType = {
    id?: true
  }

  export type OsLiteRegistrationMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    Designation?: true
    email?: true
    mobile?: true
    schoolName?: true
    eupheusSales?: true
    state?: true
    city?: true
    dateOfWebinar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteRegistrationMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    Designation?: true
    email?: true
    mobile?: true
    schoolName?: true
    eupheusSales?: true
    state?: true
    city?: true
    dateOfWebinar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteRegistrationCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    Designation?: true
    email?: true
    mobile?: true
    schoolName?: true
    eupheusSales?: true
    state?: true
    city?: true
    dateOfWebinar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OsLiteRegistrationAggregateArgs = {
    /**
     * Filter which OsLiteRegistration to aggregate.
     * 
    **/
    where?: OsLiteRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteRegistrations to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteRegistrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OsLiteRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteRegistrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteRegistrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OsLiteRegistrations
    **/
    _count?: true | OsLiteRegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OsLiteRegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OsLiteRegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OsLiteRegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OsLiteRegistrationMaxAggregateInputType
  }

  export type GetOsLiteRegistrationAggregateType<T extends OsLiteRegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateOsLiteRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOsLiteRegistration[P]>
      : GetScalarType<T[P], AggregateOsLiteRegistration[P]>
  }




  export type OsLiteRegistrationGroupByArgs = {
    where?: OsLiteRegistrationWhereInput
    orderBy?: Enumerable<OsLiteRegistrationOrderByWithAggregationInput>
    by: Array<OsLiteRegistrationScalarFieldEnum>
    having?: OsLiteRegistrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OsLiteRegistrationCountAggregateInputType | true
    _avg?: OsLiteRegistrationAvgAggregateInputType
    _sum?: OsLiteRegistrationSumAggregateInputType
    _min?: OsLiteRegistrationMinAggregateInputType
    _max?: OsLiteRegistrationMaxAggregateInputType
  }


  export type OsLiteRegistrationGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    Designation: string
    email: string
    mobile: string
    schoolName: string
    eupheusSales: string
    state: string
    city: string
    dateOfWebinar: string
    createdAt: Date
    updatedAt: Date
    _count: OsLiteRegistrationCountAggregateOutputType | null
    _avg: OsLiteRegistrationAvgAggregateOutputType | null
    _sum: OsLiteRegistrationSumAggregateOutputType | null
    _min: OsLiteRegistrationMinAggregateOutputType | null
    _max: OsLiteRegistrationMaxAggregateOutputType | null
  }

  type GetOsLiteRegistrationGroupByPayload<T extends OsLiteRegistrationGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OsLiteRegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OsLiteRegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OsLiteRegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], OsLiteRegistrationGroupByOutputType[P]>
        }
      >
    >


  export type OsLiteRegistrationSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    Designation?: boolean
    email?: boolean
    mobile?: boolean
    schoolName?: boolean
    eupheusSales?: boolean
    state?: boolean
    city?: boolean
    dateOfWebinar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OsLiteRegistrationGetPayload<
    S extends boolean | null | undefined | OsLiteRegistrationArgs,
    U = keyof S
      > = S extends true
        ? OsLiteRegistration
    : S extends undefined
    ? never
    : S extends OsLiteRegistrationArgs | OsLiteRegistrationFindManyArgs
    ?'include' extends U
    ? OsLiteRegistration 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof OsLiteRegistration ? OsLiteRegistration[P] : never
  } 
    : OsLiteRegistration
  : OsLiteRegistration


  type OsLiteRegistrationCountArgs = Merge<
    Omit<OsLiteRegistrationFindManyArgs, 'select' | 'include'> & {
      select?: OsLiteRegistrationCountAggregateInputType | true
    }
  >

  export interface OsLiteRegistrationDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OsLiteRegistration that matches the filter.
     * @param {OsLiteRegistrationFindUniqueArgs} args - Arguments to find a OsLiteRegistration
     * @example
     * // Get one OsLiteRegistration
     * const osLiteRegistration = await prisma.osLiteRegistration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OsLiteRegistrationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OsLiteRegistrationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OsLiteRegistration'> extends True ? CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration | null >, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T> | null >>

    /**
     * Find the first OsLiteRegistration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationFindFirstArgs} args - Arguments to find a OsLiteRegistration
     * @example
     * // Get one OsLiteRegistration
     * const osLiteRegistration = await prisma.osLiteRegistration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OsLiteRegistrationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OsLiteRegistrationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OsLiteRegistration'> extends True ? CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration | null >, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T> | null >>

    /**
     * Find zero or more OsLiteRegistrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OsLiteRegistrations
     * const osLiteRegistrations = await prisma.osLiteRegistration.findMany()
     * 
     * // Get first 10 OsLiteRegistrations
     * const osLiteRegistrations = await prisma.osLiteRegistration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const osLiteRegistrationWithIdOnly = await prisma.osLiteRegistration.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OsLiteRegistrationFindManyArgs>(
      args?: SelectSubset<T, OsLiteRegistrationFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OsLiteRegistration>>, PrismaPromise<Array<OsLiteRegistrationGetPayload<T>>>>

    /**
     * Create a OsLiteRegistration.
     * @param {OsLiteRegistrationCreateArgs} args - Arguments to create a OsLiteRegistration.
     * @example
     * // Create one OsLiteRegistration
     * const OsLiteRegistration = await prisma.osLiteRegistration.create({
     *   data: {
     *     // ... data to create a OsLiteRegistration
     *   }
     * })
     * 
    **/
    create<T extends OsLiteRegistrationCreateArgs>(
      args: SelectSubset<T, OsLiteRegistrationCreateArgs>
    ): CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>>

    /**
     * Create many OsLiteRegistrations.
     *     @param {OsLiteRegistrationCreateManyArgs} args - Arguments to create many OsLiteRegistrations.
     *     @example
     *     // Create many OsLiteRegistrations
     *     const osLiteRegistration = await prisma.osLiteRegistration.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OsLiteRegistrationCreateManyArgs>(
      args?: SelectSubset<T, OsLiteRegistrationCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OsLiteRegistration.
     * @param {OsLiteRegistrationDeleteArgs} args - Arguments to delete one OsLiteRegistration.
     * @example
     * // Delete one OsLiteRegistration
     * const OsLiteRegistration = await prisma.osLiteRegistration.delete({
     *   where: {
     *     // ... filter to delete one OsLiteRegistration
     *   }
     * })
     * 
    **/
    delete<T extends OsLiteRegistrationDeleteArgs>(
      args: SelectSubset<T, OsLiteRegistrationDeleteArgs>
    ): CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>>

    /**
     * Update one OsLiteRegistration.
     * @param {OsLiteRegistrationUpdateArgs} args - Arguments to update one OsLiteRegistration.
     * @example
     * // Update one OsLiteRegistration
     * const osLiteRegistration = await prisma.osLiteRegistration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OsLiteRegistrationUpdateArgs>(
      args: SelectSubset<T, OsLiteRegistrationUpdateArgs>
    ): CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>>

    /**
     * Delete zero or more OsLiteRegistrations.
     * @param {OsLiteRegistrationDeleteManyArgs} args - Arguments to filter OsLiteRegistrations to delete.
     * @example
     * // Delete a few OsLiteRegistrations
     * const { count } = await prisma.osLiteRegistration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OsLiteRegistrationDeleteManyArgs>(
      args?: SelectSubset<T, OsLiteRegistrationDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OsLiteRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OsLiteRegistrations
     * const osLiteRegistration = await prisma.osLiteRegistration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OsLiteRegistrationUpdateManyArgs>(
      args: SelectSubset<T, OsLiteRegistrationUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OsLiteRegistration.
     * @param {OsLiteRegistrationUpsertArgs} args - Arguments to update or create a OsLiteRegistration.
     * @example
     * // Update or create a OsLiteRegistration
     * const osLiteRegistration = await prisma.osLiteRegistration.upsert({
     *   create: {
     *     // ... data to create a OsLiteRegistration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OsLiteRegistration we want to update
     *   }
     * })
    **/
    upsert<T extends OsLiteRegistrationUpsertArgs>(
      args: SelectSubset<T, OsLiteRegistrationUpsertArgs>
    ): CheckSelect<T, Prisma__OsLiteRegistrationClient<OsLiteRegistration>, Prisma__OsLiteRegistrationClient<OsLiteRegistrationGetPayload<T>>>

    /**
     * Count the number of OsLiteRegistrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationCountArgs} args - Arguments to filter OsLiteRegistrations to count.
     * @example
     * // Count the number of OsLiteRegistrations
     * const count = await prisma.osLiteRegistration.count({
     *   where: {
     *     // ... the filter for the OsLiteRegistrations we want to count
     *   }
     * })
    **/
    count<T extends OsLiteRegistrationCountArgs>(
      args?: Subset<T, OsLiteRegistrationCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OsLiteRegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OsLiteRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OsLiteRegistrationAggregateArgs>(args: Subset<T, OsLiteRegistrationAggregateArgs>): PrismaPromise<GetOsLiteRegistrationAggregateType<T>>

    /**
     * Group by OsLiteRegistration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteRegistrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OsLiteRegistrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OsLiteRegistrationGroupByArgs['orderBy'] }
        : { orderBy?: OsLiteRegistrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OsLiteRegistrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOsLiteRegistrationGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OsLiteRegistration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OsLiteRegistrationClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OsLiteRegistration findUnique
   */
  export type OsLiteRegistrationFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * Throw an Error if a OsLiteRegistration can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteRegistration to fetch.
     * 
    **/
    where: OsLiteRegistrationWhereUniqueInput
  }


  /**
   * OsLiteRegistration findFirst
   */
  export type OsLiteRegistrationFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * Throw an Error if a OsLiteRegistration can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteRegistration to fetch.
     * 
    **/
    where?: OsLiteRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteRegistrations to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteRegistrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OsLiteRegistrations.
     * 
    **/
    cursor?: OsLiteRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteRegistrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteRegistrations.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OsLiteRegistrations.
     * 
    **/
    distinct?: Enumerable<OsLiteRegistrationScalarFieldEnum>
  }


  /**
   * OsLiteRegistration findMany
   */
  export type OsLiteRegistrationFindManyArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * Filter, which OsLiteRegistrations to fetch.
     * 
    **/
    where?: OsLiteRegistrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteRegistrations to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteRegistrationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OsLiteRegistrations.
     * 
    **/
    cursor?: OsLiteRegistrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteRegistrations from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteRegistrations.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OsLiteRegistrationScalarFieldEnum>
  }


  /**
   * OsLiteRegistration create
   */
  export type OsLiteRegistrationCreateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * The data needed to create a OsLiteRegistration.
     * 
    **/
    data: XOR<OsLiteRegistrationCreateInput, OsLiteRegistrationUncheckedCreateInput>
  }


  /**
   * OsLiteRegistration createMany
   */
  export type OsLiteRegistrationCreateManyArgs = {
    /**
     * The data used to create many OsLiteRegistrations.
     * 
    **/
    data: Enumerable<OsLiteRegistrationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OsLiteRegistration update
   */
  export type OsLiteRegistrationUpdateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * The data needed to update a OsLiteRegistration.
     * 
    **/
    data: XOR<OsLiteRegistrationUpdateInput, OsLiteRegistrationUncheckedUpdateInput>
    /**
     * Choose, which OsLiteRegistration to update.
     * 
    **/
    where: OsLiteRegistrationWhereUniqueInput
  }


  /**
   * OsLiteRegistration updateMany
   */
  export type OsLiteRegistrationUpdateManyArgs = {
    /**
     * The data used to update OsLiteRegistrations.
     * 
    **/
    data: XOR<OsLiteRegistrationUpdateManyMutationInput, OsLiteRegistrationUncheckedUpdateManyInput>
    /**
     * Filter which OsLiteRegistrations to update
     * 
    **/
    where?: OsLiteRegistrationWhereInput
  }


  /**
   * OsLiteRegistration upsert
   */
  export type OsLiteRegistrationUpsertArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * The filter to search for the OsLiteRegistration to update in case it exists.
     * 
    **/
    where: OsLiteRegistrationWhereUniqueInput
    /**
     * In case the OsLiteRegistration found by the `where` argument doesn't exist, create a new OsLiteRegistration with this data.
     * 
    **/
    create: XOR<OsLiteRegistrationCreateInput, OsLiteRegistrationUncheckedCreateInput>
    /**
     * In case the OsLiteRegistration was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OsLiteRegistrationUpdateInput, OsLiteRegistrationUncheckedUpdateInput>
  }


  /**
   * OsLiteRegistration delete
   */
  export type OsLiteRegistrationDeleteArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
    /**
     * Filter which OsLiteRegistration to delete.
     * 
    **/
    where: OsLiteRegistrationWhereUniqueInput
  }


  /**
   * OsLiteRegistration deleteMany
   */
  export type OsLiteRegistrationDeleteManyArgs = {
    /**
     * Filter which OsLiteRegistrations to delete
     * 
    **/
    where?: OsLiteRegistrationWhereInput
  }


  /**
   * OsLiteRegistration without action
   */
  export type OsLiteRegistrationArgs = {
    /**
     * Select specific fields to fetch from the OsLiteRegistration
     * 
    **/
    select?: OsLiteRegistrationSelect | null
  }



  /**
   * Model OsLiteState
   */


  export type AggregateOsLiteState = {
    _count: OsLiteStateCountAggregateOutputType | null
    _avg: OsLiteStateAvgAggregateOutputType | null
    _sum: OsLiteStateSumAggregateOutputType | null
    _min: OsLiteStateMinAggregateOutputType | null
    _max: OsLiteStateMaxAggregateOutputType | null
  }

  export type OsLiteStateAvgAggregateOutputType = {
    id: number | null
  }

  export type OsLiteStateSumAggregateOutputType = {
    id: number | null
  }

  export type OsLiteStateMinAggregateOutputType = {
    id: number | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteStateMaxAggregateOutputType = {
    id: number | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteStateCountAggregateOutputType = {
    id: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OsLiteStateAvgAggregateInputType = {
    id?: true
  }

  export type OsLiteStateSumAggregateInputType = {
    id?: true
  }

  export type OsLiteStateMinAggregateInputType = {
    id?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteStateMaxAggregateInputType = {
    id?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteStateCountAggregateInputType = {
    id?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OsLiteStateAggregateArgs = {
    /**
     * Filter which OsLiteState to aggregate.
     * 
    **/
    where?: OsLiteStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteStates to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteStateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OsLiteStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteStates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteStates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OsLiteStates
    **/
    _count?: true | OsLiteStateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OsLiteStateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OsLiteStateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OsLiteStateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OsLiteStateMaxAggregateInputType
  }

  export type GetOsLiteStateAggregateType<T extends OsLiteStateAggregateArgs> = {
        [P in keyof T & keyof AggregateOsLiteState]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOsLiteState[P]>
      : GetScalarType<T[P], AggregateOsLiteState[P]>
  }




  export type OsLiteStateGroupByArgs = {
    where?: OsLiteStateWhereInput
    orderBy?: Enumerable<OsLiteStateOrderByWithAggregationInput>
    by: Array<OsLiteStateScalarFieldEnum>
    having?: OsLiteStateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OsLiteStateCountAggregateInputType | true
    _avg?: OsLiteStateAvgAggregateInputType
    _sum?: OsLiteStateSumAggregateInputType
    _min?: OsLiteStateMinAggregateInputType
    _max?: OsLiteStateMaxAggregateInputType
  }


  export type OsLiteStateGroupByOutputType = {
    id: number
    state: string
    createdAt: Date
    updatedAt: Date
    _count: OsLiteStateCountAggregateOutputType | null
    _avg: OsLiteStateAvgAggregateOutputType | null
    _sum: OsLiteStateSumAggregateOutputType | null
    _min: OsLiteStateMinAggregateOutputType | null
    _max: OsLiteStateMaxAggregateOutputType | null
  }

  type GetOsLiteStateGroupByPayload<T extends OsLiteStateGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OsLiteStateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OsLiteStateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OsLiteStateGroupByOutputType[P]>
            : GetScalarType<T[P], OsLiteStateGroupByOutputType[P]>
        }
      >
    >


  export type OsLiteStateSelect = {
    id?: boolean
    state?: boolean
    oslitePersons?: boolean | OsLiteSalesPersonsFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | OsLiteStateCountOutputTypeArgs
  }

  export type OsLiteStateInclude = {
    oslitePersons?: boolean | OsLiteSalesPersonsFindManyArgs
    _count?: boolean | OsLiteStateCountOutputTypeArgs
  }

  export type OsLiteStateGetPayload<
    S extends boolean | null | undefined | OsLiteStateArgs,
    U = keyof S
      > = S extends true
        ? OsLiteState
    : S extends undefined
    ? never
    : S extends OsLiteStateArgs | OsLiteStateFindManyArgs
    ?'include' extends U
    ? OsLiteState  & {
    [P in TrueKeys<S['include']>]:
        P extends 'oslitePersons' ? Array < OsLiteSalesPersonsGetPayload<S['include'][P]>>  :
        P extends '_count' ? OsLiteStateCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'oslitePersons' ? Array < OsLiteSalesPersonsGetPayload<S['select'][P]>>  :
        P extends '_count' ? OsLiteStateCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof OsLiteState ? OsLiteState[P] : never
  } 
    : OsLiteState
  : OsLiteState


  type OsLiteStateCountArgs = Merge<
    Omit<OsLiteStateFindManyArgs, 'select' | 'include'> & {
      select?: OsLiteStateCountAggregateInputType | true
    }
  >

  export interface OsLiteStateDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OsLiteState that matches the filter.
     * @param {OsLiteStateFindUniqueArgs} args - Arguments to find a OsLiteState
     * @example
     * // Get one OsLiteState
     * const osLiteState = await prisma.osLiteState.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OsLiteStateFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OsLiteStateFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OsLiteState'> extends True ? CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState | null >, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T> | null >>

    /**
     * Find the first OsLiteState that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateFindFirstArgs} args - Arguments to find a OsLiteState
     * @example
     * // Get one OsLiteState
     * const osLiteState = await prisma.osLiteState.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OsLiteStateFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OsLiteStateFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OsLiteState'> extends True ? CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState | null >, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T> | null >>

    /**
     * Find zero or more OsLiteStates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OsLiteStates
     * const osLiteStates = await prisma.osLiteState.findMany()
     * 
     * // Get first 10 OsLiteStates
     * const osLiteStates = await prisma.osLiteState.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const osLiteStateWithIdOnly = await prisma.osLiteState.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OsLiteStateFindManyArgs>(
      args?: SelectSubset<T, OsLiteStateFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OsLiteState>>, PrismaPromise<Array<OsLiteStateGetPayload<T>>>>

    /**
     * Create a OsLiteState.
     * @param {OsLiteStateCreateArgs} args - Arguments to create a OsLiteState.
     * @example
     * // Create one OsLiteState
     * const OsLiteState = await prisma.osLiteState.create({
     *   data: {
     *     // ... data to create a OsLiteState
     *   }
     * })
     * 
    **/
    create<T extends OsLiteStateCreateArgs>(
      args: SelectSubset<T, OsLiteStateCreateArgs>
    ): CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>>

    /**
     * Create many OsLiteStates.
     *     @param {OsLiteStateCreateManyArgs} args - Arguments to create many OsLiteStates.
     *     @example
     *     // Create many OsLiteStates
     *     const osLiteState = await prisma.osLiteState.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OsLiteStateCreateManyArgs>(
      args?: SelectSubset<T, OsLiteStateCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OsLiteState.
     * @param {OsLiteStateDeleteArgs} args - Arguments to delete one OsLiteState.
     * @example
     * // Delete one OsLiteState
     * const OsLiteState = await prisma.osLiteState.delete({
     *   where: {
     *     // ... filter to delete one OsLiteState
     *   }
     * })
     * 
    **/
    delete<T extends OsLiteStateDeleteArgs>(
      args: SelectSubset<T, OsLiteStateDeleteArgs>
    ): CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>>

    /**
     * Update one OsLiteState.
     * @param {OsLiteStateUpdateArgs} args - Arguments to update one OsLiteState.
     * @example
     * // Update one OsLiteState
     * const osLiteState = await prisma.osLiteState.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OsLiteStateUpdateArgs>(
      args: SelectSubset<T, OsLiteStateUpdateArgs>
    ): CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>>

    /**
     * Delete zero or more OsLiteStates.
     * @param {OsLiteStateDeleteManyArgs} args - Arguments to filter OsLiteStates to delete.
     * @example
     * // Delete a few OsLiteStates
     * const { count } = await prisma.osLiteState.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OsLiteStateDeleteManyArgs>(
      args?: SelectSubset<T, OsLiteStateDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OsLiteStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OsLiteStates
     * const osLiteState = await prisma.osLiteState.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OsLiteStateUpdateManyArgs>(
      args: SelectSubset<T, OsLiteStateUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OsLiteState.
     * @param {OsLiteStateUpsertArgs} args - Arguments to update or create a OsLiteState.
     * @example
     * // Update or create a OsLiteState
     * const osLiteState = await prisma.osLiteState.upsert({
     *   create: {
     *     // ... data to create a OsLiteState
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OsLiteState we want to update
     *   }
     * })
    **/
    upsert<T extends OsLiteStateUpsertArgs>(
      args: SelectSubset<T, OsLiteStateUpsertArgs>
    ): CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState>, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T>>>

    /**
     * Count the number of OsLiteStates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateCountArgs} args - Arguments to filter OsLiteStates to count.
     * @example
     * // Count the number of OsLiteStates
     * const count = await prisma.osLiteState.count({
     *   where: {
     *     // ... the filter for the OsLiteStates we want to count
     *   }
     * })
    **/
    count<T extends OsLiteStateCountArgs>(
      args?: Subset<T, OsLiteStateCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OsLiteStateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OsLiteState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OsLiteStateAggregateArgs>(args: Subset<T, OsLiteStateAggregateArgs>): PrismaPromise<GetOsLiteStateAggregateType<T>>

    /**
     * Group by OsLiteState.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteStateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OsLiteStateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OsLiteStateGroupByArgs['orderBy'] }
        : { orderBy?: OsLiteStateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OsLiteStateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOsLiteStateGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OsLiteState.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OsLiteStateClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    oslitePersons<T extends OsLiteSalesPersonsFindManyArgs = {}>(args?: Subset<T, OsLiteSalesPersonsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<OsLiteSalesPersons>>, PrismaPromise<Array<OsLiteSalesPersonsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OsLiteState findUnique
   */
  export type OsLiteStateFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * Throw an Error if a OsLiteState can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteState to fetch.
     * 
    **/
    where: OsLiteStateWhereUniqueInput
  }


  /**
   * OsLiteState findFirst
   */
  export type OsLiteStateFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * Throw an Error if a OsLiteState can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteState to fetch.
     * 
    **/
    where?: OsLiteStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteStates to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteStateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OsLiteStates.
     * 
    **/
    cursor?: OsLiteStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteStates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteStates.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OsLiteStates.
     * 
    **/
    distinct?: Enumerable<OsLiteStateScalarFieldEnum>
  }


  /**
   * OsLiteState findMany
   */
  export type OsLiteStateFindManyArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * Filter, which OsLiteStates to fetch.
     * 
    **/
    where?: OsLiteStateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteStates to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteStateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OsLiteStates.
     * 
    **/
    cursor?: OsLiteStateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteStates from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteStates.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OsLiteStateScalarFieldEnum>
  }


  /**
   * OsLiteState create
   */
  export type OsLiteStateCreateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * The data needed to create a OsLiteState.
     * 
    **/
    data: XOR<OsLiteStateCreateInput, OsLiteStateUncheckedCreateInput>
  }


  /**
   * OsLiteState createMany
   */
  export type OsLiteStateCreateManyArgs = {
    /**
     * The data used to create many OsLiteStates.
     * 
    **/
    data: Enumerable<OsLiteStateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OsLiteState update
   */
  export type OsLiteStateUpdateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * The data needed to update a OsLiteState.
     * 
    **/
    data: XOR<OsLiteStateUpdateInput, OsLiteStateUncheckedUpdateInput>
    /**
     * Choose, which OsLiteState to update.
     * 
    **/
    where: OsLiteStateWhereUniqueInput
  }


  /**
   * OsLiteState updateMany
   */
  export type OsLiteStateUpdateManyArgs = {
    /**
     * The data used to update OsLiteStates.
     * 
    **/
    data: XOR<OsLiteStateUpdateManyMutationInput, OsLiteStateUncheckedUpdateManyInput>
    /**
     * Filter which OsLiteStates to update
     * 
    **/
    where?: OsLiteStateWhereInput
  }


  /**
   * OsLiteState upsert
   */
  export type OsLiteStateUpsertArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * The filter to search for the OsLiteState to update in case it exists.
     * 
    **/
    where: OsLiteStateWhereUniqueInput
    /**
     * In case the OsLiteState found by the `where` argument doesn't exist, create a new OsLiteState with this data.
     * 
    **/
    create: XOR<OsLiteStateCreateInput, OsLiteStateUncheckedCreateInput>
    /**
     * In case the OsLiteState was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OsLiteStateUpdateInput, OsLiteStateUncheckedUpdateInput>
  }


  /**
   * OsLiteState delete
   */
  export type OsLiteStateDeleteArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
    /**
     * Filter which OsLiteState to delete.
     * 
    **/
    where: OsLiteStateWhereUniqueInput
  }


  /**
   * OsLiteState deleteMany
   */
  export type OsLiteStateDeleteManyArgs = {
    /**
     * Filter which OsLiteStates to delete
     * 
    **/
    where?: OsLiteStateWhereInput
  }


  /**
   * OsLiteState without action
   */
  export type OsLiteStateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteState
     * 
    **/
    select?: OsLiteStateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteStateInclude | null
  }



  /**
   * Model OsLiteSalesPersons
   */


  export type AggregateOsLiteSalesPersons = {
    _count: OsLiteSalesPersonsCountAggregateOutputType | null
    _avg: OsLiteSalesPersonsAvgAggregateOutputType | null
    _sum: OsLiteSalesPersonsSumAggregateOutputType | null
    _min: OsLiteSalesPersonsMinAggregateOutputType | null
    _max: OsLiteSalesPersonsMaxAggregateOutputType | null
  }

  export type OsLiteSalesPersonsAvgAggregateOutputType = {
    id: number | null
    stateId: number | null
  }

  export type OsLiteSalesPersonsSumAggregateOutputType = {
    id: number | null
    stateId: number | null
  }

  export type OsLiteSalesPersonsMinAggregateOutputType = {
    id: number | null
    name: string | null
    stateId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteSalesPersonsMaxAggregateOutputType = {
    id: number | null
    name: string | null
    stateId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OsLiteSalesPersonsCountAggregateOutputType = {
    id: number
    name: number
    stateId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OsLiteSalesPersonsAvgAggregateInputType = {
    id?: true
    stateId?: true
  }

  export type OsLiteSalesPersonsSumAggregateInputType = {
    id?: true
    stateId?: true
  }

  export type OsLiteSalesPersonsMinAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteSalesPersonsMaxAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OsLiteSalesPersonsCountAggregateInputType = {
    id?: true
    name?: true
    stateId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OsLiteSalesPersonsAggregateArgs = {
    /**
     * Filter which OsLiteSalesPersons to aggregate.
     * 
    **/
    where?: OsLiteSalesPersonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteSalesPersons to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteSalesPersonsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: OsLiteSalesPersonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteSalesPersons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteSalesPersons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OsLiteSalesPersons
    **/
    _count?: true | OsLiteSalesPersonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OsLiteSalesPersonsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OsLiteSalesPersonsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OsLiteSalesPersonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OsLiteSalesPersonsMaxAggregateInputType
  }

  export type GetOsLiteSalesPersonsAggregateType<T extends OsLiteSalesPersonsAggregateArgs> = {
        [P in keyof T & keyof AggregateOsLiteSalesPersons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOsLiteSalesPersons[P]>
      : GetScalarType<T[P], AggregateOsLiteSalesPersons[P]>
  }




  export type OsLiteSalesPersonsGroupByArgs = {
    where?: OsLiteSalesPersonsWhereInput
    orderBy?: Enumerable<OsLiteSalesPersonsOrderByWithAggregationInput>
    by: Array<OsLiteSalesPersonsScalarFieldEnum>
    having?: OsLiteSalesPersonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OsLiteSalesPersonsCountAggregateInputType | true
    _avg?: OsLiteSalesPersonsAvgAggregateInputType
    _sum?: OsLiteSalesPersonsSumAggregateInputType
    _min?: OsLiteSalesPersonsMinAggregateInputType
    _max?: OsLiteSalesPersonsMaxAggregateInputType
  }


  export type OsLiteSalesPersonsGroupByOutputType = {
    id: number
    name: string
    stateId: number
    createdAt: Date
    updatedAt: Date
    _count: OsLiteSalesPersonsCountAggregateOutputType | null
    _avg: OsLiteSalesPersonsAvgAggregateOutputType | null
    _sum: OsLiteSalesPersonsSumAggregateOutputType | null
    _min: OsLiteSalesPersonsMinAggregateOutputType | null
    _max: OsLiteSalesPersonsMaxAggregateOutputType | null
  }

  type GetOsLiteSalesPersonsGroupByPayload<T extends OsLiteSalesPersonsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<OsLiteSalesPersonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OsLiteSalesPersonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OsLiteSalesPersonsGroupByOutputType[P]>
            : GetScalarType<T[P], OsLiteSalesPersonsGroupByOutputType[P]>
        }
      >
    >


  export type OsLiteSalesPersonsSelect = {
    id?: boolean
    name?: boolean
    stateId?: boolean
    osliteState?: boolean | OsLiteStateArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OsLiteSalesPersonsInclude = {
    osliteState?: boolean | OsLiteStateArgs
  }

  export type OsLiteSalesPersonsGetPayload<
    S extends boolean | null | undefined | OsLiteSalesPersonsArgs,
    U = keyof S
      > = S extends true
        ? OsLiteSalesPersons
    : S extends undefined
    ? never
    : S extends OsLiteSalesPersonsArgs | OsLiteSalesPersonsFindManyArgs
    ?'include' extends U
    ? OsLiteSalesPersons  & {
    [P in TrueKeys<S['include']>]:
        P extends 'osliteState' ? OsLiteStateGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'osliteState' ? OsLiteStateGetPayload<S['select'][P]> :  P extends keyof OsLiteSalesPersons ? OsLiteSalesPersons[P] : never
  } 
    : OsLiteSalesPersons
  : OsLiteSalesPersons


  type OsLiteSalesPersonsCountArgs = Merge<
    Omit<OsLiteSalesPersonsFindManyArgs, 'select' | 'include'> & {
      select?: OsLiteSalesPersonsCountAggregateInputType | true
    }
  >

  export interface OsLiteSalesPersonsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one OsLiteSalesPersons that matches the filter.
     * @param {OsLiteSalesPersonsFindUniqueArgs} args - Arguments to find a OsLiteSalesPersons
     * @example
     * // Get one OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OsLiteSalesPersonsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OsLiteSalesPersonsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OsLiteSalesPersons'> extends True ? CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons | null >, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T> | null >>

    /**
     * Find the first OsLiteSalesPersons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsFindFirstArgs} args - Arguments to find a OsLiteSalesPersons
     * @example
     * // Get one OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OsLiteSalesPersonsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OsLiteSalesPersonsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OsLiteSalesPersons'> extends True ? CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>> : CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons | null >, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T> | null >>

    /**
     * Find zero or more OsLiteSalesPersons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.findMany()
     * 
     * // Get first 10 OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const osLiteSalesPersonsWithIdOnly = await prisma.osLiteSalesPersons.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OsLiteSalesPersonsFindManyArgs>(
      args?: SelectSubset<T, OsLiteSalesPersonsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<OsLiteSalesPersons>>, PrismaPromise<Array<OsLiteSalesPersonsGetPayload<T>>>>

    /**
     * Create a OsLiteSalesPersons.
     * @param {OsLiteSalesPersonsCreateArgs} args - Arguments to create a OsLiteSalesPersons.
     * @example
     * // Create one OsLiteSalesPersons
     * const OsLiteSalesPersons = await prisma.osLiteSalesPersons.create({
     *   data: {
     *     // ... data to create a OsLiteSalesPersons
     *   }
     * })
     * 
    **/
    create<T extends OsLiteSalesPersonsCreateArgs>(
      args: SelectSubset<T, OsLiteSalesPersonsCreateArgs>
    ): CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>>

    /**
     * Create many OsLiteSalesPersons.
     *     @param {OsLiteSalesPersonsCreateManyArgs} args - Arguments to create many OsLiteSalesPersons.
     *     @example
     *     // Create many OsLiteSalesPersons
     *     const osLiteSalesPersons = await prisma.osLiteSalesPersons.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OsLiteSalesPersonsCreateManyArgs>(
      args?: SelectSubset<T, OsLiteSalesPersonsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a OsLiteSalesPersons.
     * @param {OsLiteSalesPersonsDeleteArgs} args - Arguments to delete one OsLiteSalesPersons.
     * @example
     * // Delete one OsLiteSalesPersons
     * const OsLiteSalesPersons = await prisma.osLiteSalesPersons.delete({
     *   where: {
     *     // ... filter to delete one OsLiteSalesPersons
     *   }
     * })
     * 
    **/
    delete<T extends OsLiteSalesPersonsDeleteArgs>(
      args: SelectSubset<T, OsLiteSalesPersonsDeleteArgs>
    ): CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>>

    /**
     * Update one OsLiteSalesPersons.
     * @param {OsLiteSalesPersonsUpdateArgs} args - Arguments to update one OsLiteSalesPersons.
     * @example
     * // Update one OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OsLiteSalesPersonsUpdateArgs>(
      args: SelectSubset<T, OsLiteSalesPersonsUpdateArgs>
    ): CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>>

    /**
     * Delete zero or more OsLiteSalesPersons.
     * @param {OsLiteSalesPersonsDeleteManyArgs} args - Arguments to filter OsLiteSalesPersons to delete.
     * @example
     * // Delete a few OsLiteSalesPersons
     * const { count } = await prisma.osLiteSalesPersons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OsLiteSalesPersonsDeleteManyArgs>(
      args?: SelectSubset<T, OsLiteSalesPersonsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more OsLiteSalesPersons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OsLiteSalesPersonsUpdateManyArgs>(
      args: SelectSubset<T, OsLiteSalesPersonsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one OsLiteSalesPersons.
     * @param {OsLiteSalesPersonsUpsertArgs} args - Arguments to update or create a OsLiteSalesPersons.
     * @example
     * // Update or create a OsLiteSalesPersons
     * const osLiteSalesPersons = await prisma.osLiteSalesPersons.upsert({
     *   create: {
     *     // ... data to create a OsLiteSalesPersons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OsLiteSalesPersons we want to update
     *   }
     * })
    **/
    upsert<T extends OsLiteSalesPersonsUpsertArgs>(
      args: SelectSubset<T, OsLiteSalesPersonsUpsertArgs>
    ): CheckSelect<T, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersons>, Prisma__OsLiteSalesPersonsClient<OsLiteSalesPersonsGetPayload<T>>>

    /**
     * Count the number of OsLiteSalesPersons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsCountArgs} args - Arguments to filter OsLiteSalesPersons to count.
     * @example
     * // Count the number of OsLiteSalesPersons
     * const count = await prisma.osLiteSalesPersons.count({
     *   where: {
     *     // ... the filter for the OsLiteSalesPersons we want to count
     *   }
     * })
    **/
    count<T extends OsLiteSalesPersonsCountArgs>(
      args?: Subset<T, OsLiteSalesPersonsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OsLiteSalesPersonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OsLiteSalesPersons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OsLiteSalesPersonsAggregateArgs>(args: Subset<T, OsLiteSalesPersonsAggregateArgs>): PrismaPromise<GetOsLiteSalesPersonsAggregateType<T>>

    /**
     * Group by OsLiteSalesPersons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OsLiteSalesPersonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OsLiteSalesPersonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OsLiteSalesPersonsGroupByArgs['orderBy'] }
        : { orderBy?: OsLiteSalesPersonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OsLiteSalesPersonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOsLiteSalesPersonsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OsLiteSalesPersons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OsLiteSalesPersonsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    osliteState<T extends OsLiteStateArgs = {}>(args?: Subset<T, OsLiteStateArgs>): CheckSelect<T, Prisma__OsLiteStateClient<OsLiteState | null >, Prisma__OsLiteStateClient<OsLiteStateGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OsLiteSalesPersons findUnique
   */
  export type OsLiteSalesPersonsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * Throw an Error if a OsLiteSalesPersons can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteSalesPersons to fetch.
     * 
    **/
    where: OsLiteSalesPersonsWhereUniqueInput
  }


  /**
   * OsLiteSalesPersons findFirst
   */
  export type OsLiteSalesPersonsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * Throw an Error if a OsLiteSalesPersons can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which OsLiteSalesPersons to fetch.
     * 
    **/
    where?: OsLiteSalesPersonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteSalesPersons to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteSalesPersonsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OsLiteSalesPersons.
     * 
    **/
    cursor?: OsLiteSalesPersonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteSalesPersons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteSalesPersons.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OsLiteSalesPersons.
     * 
    **/
    distinct?: Enumerable<OsLiteSalesPersonsScalarFieldEnum>
  }


  /**
   * OsLiteSalesPersons findMany
   */
  export type OsLiteSalesPersonsFindManyArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * Filter, which OsLiteSalesPersons to fetch.
     * 
    **/
    where?: OsLiteSalesPersonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OsLiteSalesPersons to fetch.
     * 
    **/
    orderBy?: Enumerable<OsLiteSalesPersonsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OsLiteSalesPersons.
     * 
    **/
    cursor?: OsLiteSalesPersonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OsLiteSalesPersons from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OsLiteSalesPersons.
     * 
    **/
    skip?: number
    distinct?: Enumerable<OsLiteSalesPersonsScalarFieldEnum>
  }


  /**
   * OsLiteSalesPersons create
   */
  export type OsLiteSalesPersonsCreateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * The data needed to create a OsLiteSalesPersons.
     * 
    **/
    data: XOR<OsLiteSalesPersonsCreateInput, OsLiteSalesPersonsUncheckedCreateInput>
  }


  /**
   * OsLiteSalesPersons createMany
   */
  export type OsLiteSalesPersonsCreateManyArgs = {
    /**
     * The data used to create many OsLiteSalesPersons.
     * 
    **/
    data: Enumerable<OsLiteSalesPersonsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OsLiteSalesPersons update
   */
  export type OsLiteSalesPersonsUpdateArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * The data needed to update a OsLiteSalesPersons.
     * 
    **/
    data: XOR<OsLiteSalesPersonsUpdateInput, OsLiteSalesPersonsUncheckedUpdateInput>
    /**
     * Choose, which OsLiteSalesPersons to update.
     * 
    **/
    where: OsLiteSalesPersonsWhereUniqueInput
  }


  /**
   * OsLiteSalesPersons updateMany
   */
  export type OsLiteSalesPersonsUpdateManyArgs = {
    /**
     * The data used to update OsLiteSalesPersons.
     * 
    **/
    data: XOR<OsLiteSalesPersonsUpdateManyMutationInput, OsLiteSalesPersonsUncheckedUpdateManyInput>
    /**
     * Filter which OsLiteSalesPersons to update
     * 
    **/
    where?: OsLiteSalesPersonsWhereInput
  }


  /**
   * OsLiteSalesPersons upsert
   */
  export type OsLiteSalesPersonsUpsertArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * The filter to search for the OsLiteSalesPersons to update in case it exists.
     * 
    **/
    where: OsLiteSalesPersonsWhereUniqueInput
    /**
     * In case the OsLiteSalesPersons found by the `where` argument doesn't exist, create a new OsLiteSalesPersons with this data.
     * 
    **/
    create: XOR<OsLiteSalesPersonsCreateInput, OsLiteSalesPersonsUncheckedCreateInput>
    /**
     * In case the OsLiteSalesPersons was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<OsLiteSalesPersonsUpdateInput, OsLiteSalesPersonsUncheckedUpdateInput>
  }


  /**
   * OsLiteSalesPersons delete
   */
  export type OsLiteSalesPersonsDeleteArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
    /**
     * Filter which OsLiteSalesPersons to delete.
     * 
    **/
    where: OsLiteSalesPersonsWhereUniqueInput
  }


  /**
   * OsLiteSalesPersons deleteMany
   */
  export type OsLiteSalesPersonsDeleteManyArgs = {
    /**
     * Filter which OsLiteSalesPersons to delete
     * 
    **/
    where?: OsLiteSalesPersonsWhereInput
  }


  /**
   * OsLiteSalesPersons without action
   */
  export type OsLiteSalesPersonsArgs = {
    /**
     * Select specific fields to fetch from the OsLiteSalesPersons
     * 
    **/
    select?: OsLiteSalesPersonsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: OsLiteSalesPersonsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const NewsScalarFieldEnum: {
    id: 'id',
    headline: 'headline',
    desc: 'desc',
    date: 'date',
    link: 'link',
    imgUrl: 'imgUrl',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NewsScalarFieldEnum = (typeof NewsScalarFieldEnum)[keyof typeof NewsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    email: 'email',
    phone: 'phone',
    paymentID: 'paymentID',
    parentName: 'parentName',
    class: 'class',
    section: 'section',
    SchoolId: 'SchoolId',
    orderid: 'orderid',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const SchoolsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    state: 'state',
    city: 'city',
    coupon: 'coupon',
    price: 'price'
  };

  export type SchoolsScalarFieldEnum = (typeof SchoolsScalarFieldEnum)[keyof typeof SchoolsScalarFieldEnum]


  export const UnsubscribeScalarFieldEnum: {
    id: 'id',
    email: 'email',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UnsubscribeScalarFieldEnum = (typeof UnsubscribeScalarFieldEnum)[keyof typeof UnsubscribeScalarFieldEnum]


  export const OsLiteRegistrationScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    Designation: 'Designation',
    email: 'email',
    mobile: 'mobile',
    schoolName: 'schoolName',
    eupheusSales: 'eupheusSales',
    state: 'state',
    city: 'city',
    dateOfWebinar: 'dateOfWebinar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OsLiteRegistrationScalarFieldEnum = (typeof OsLiteRegistrationScalarFieldEnum)[keyof typeof OsLiteRegistrationScalarFieldEnum]


  export const OsLiteStateScalarFieldEnum: {
    id: 'id',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OsLiteStateScalarFieldEnum = (typeof OsLiteStateScalarFieldEnum)[keyof typeof OsLiteStateScalarFieldEnum]


  export const OsLiteSalesPersonsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    stateId: 'stateId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OsLiteSalesPersonsScalarFieldEnum = (typeof OsLiteSalesPersonsScalarFieldEnum)[keyof typeof OsLiteSalesPersonsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type NewsWhereInput = {
    AND?: Enumerable<NewsWhereInput>
    OR?: Enumerable<NewsWhereInput>
    NOT?: Enumerable<NewsWhereInput>
    id?: IntFilter | number
    headline?: StringFilter | string
    desc?: StringFilter | string
    date?: StringFilter | string
    link?: StringFilter | string
    imgUrl?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    createdBy?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type NewsOrderByWithRelationInput = {
    id?: SortOrder
    headline?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    link?: SortOrder
    imgUrl?: SortOrder
    user?: UserOrderByWithRelationInput
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsWhereUniqueInput = {
    id?: number
  }

  export type NewsOrderByWithAggregationInput = {
    id?: SortOrder
    headline?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    link?: SortOrder
    imgUrl?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NewsCountOrderByAggregateInput
    _avg?: NewsAvgOrderByAggregateInput
    _max?: NewsMaxOrderByAggregateInput
    _min?: NewsMinOrderByAggregateInput
    _sum?: NewsSumOrderByAggregateInput
  }

  export type NewsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<NewsScalarWhereWithAggregatesInput>
    OR?: Enumerable<NewsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<NewsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    headline?: StringWithAggregatesFilter | string
    desc?: StringWithAggregatesFilter | string
    date?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    imgUrl?: StringWithAggregatesFilter | string
    createdBy?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    news?: NewsListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    news?: NewsOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PaymentWhereInput = {
    AND?: Enumerable<PaymentWhereInput>
    OR?: Enumerable<PaymentWhereInput>
    NOT?: Enumerable<PaymentWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    paymentID?: StringFilter | string
    parentName?: StringFilter | string
    class?: IntFilter | number
    section?: StringFilter | string
    school?: XOR<SchoolsRelationFilter, SchoolsWhereInput>
    SchoolId?: IntFilter | number
    orderid?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    paymentID?: SortOrder
    parentName?: SortOrder
    class?: SortOrder
    section?: SortOrder
    school?: SchoolsOrderByWithRelationInput
    SchoolId?: SortOrder
    orderid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentWhereUniqueInput = {
    id?: number
    orderid?: string
  }

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    paymentID?: SortOrder
    parentName?: SortOrder
    class?: SortOrder
    section?: SortOrder
    SchoolId?: SortOrder
    orderid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    OR?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PaymentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    paymentID?: StringWithAggregatesFilter | string
    parentName?: StringWithAggregatesFilter | string
    class?: IntWithAggregatesFilter | number
    section?: StringWithAggregatesFilter | string
    SchoolId?: IntWithAggregatesFilter | number
    orderid?: StringNullableWithAggregatesFilter | string | null
    status?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SchoolsWhereInput = {
    AND?: Enumerable<SchoolsWhereInput>
    OR?: Enumerable<SchoolsWhereInput>
    NOT?: Enumerable<SchoolsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    state?: StringFilter | string
    city?: StringFilter | string
    payment?: PaymentListRelationFilter
    coupon?: StringFilter | string
    price?: FloatFilter | number
  }

  export type SchoolsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    state?: SortOrder
    city?: SortOrder
    payment?: PaymentOrderByRelationAggregateInput
    coupon?: SortOrder
    price?: SortOrder
  }

  export type SchoolsWhereUniqueInput = {
    id?: number
    coupon?: string
  }

  export type SchoolsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    state?: SortOrder
    city?: SortOrder
    coupon?: SortOrder
    price?: SortOrder
    _count?: SchoolsCountOrderByAggregateInput
    _avg?: SchoolsAvgOrderByAggregateInput
    _max?: SchoolsMaxOrderByAggregateInput
    _min?: SchoolsMinOrderByAggregateInput
    _sum?: SchoolsSumOrderByAggregateInput
  }

  export type SchoolsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SchoolsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    coupon?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
  }

  export type UnsubscribeWhereInput = {
    AND?: Enumerable<UnsubscribeWhereInput>
    OR?: Enumerable<UnsubscribeWhereInput>
    NOT?: Enumerable<UnsubscribeWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    status?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UnsubscribeOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnsubscribeWhereUniqueInput = {
    id?: number
  }

  export type UnsubscribeOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UnsubscribeCountOrderByAggregateInput
    _avg?: UnsubscribeAvgOrderByAggregateInput
    _max?: UnsubscribeMaxOrderByAggregateInput
    _min?: UnsubscribeMinOrderByAggregateInput
    _sum?: UnsubscribeSumOrderByAggregateInput
  }

  export type UnsubscribeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UnsubscribeScalarWhereWithAggregatesInput>
    OR?: Enumerable<UnsubscribeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UnsubscribeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OsLiteRegistrationWhereInput = {
    AND?: Enumerable<OsLiteRegistrationWhereInput>
    OR?: Enumerable<OsLiteRegistrationWhereInput>
    NOT?: Enumerable<OsLiteRegistrationWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    Designation?: StringFilter | string
    email?: StringFilter | string
    mobile?: StringFilter | string
    schoolName?: StringFilter | string
    eupheusSales?: StringFilter | string
    state?: StringFilter | string
    city?: StringFilter | string
    dateOfWebinar?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OsLiteRegistrationOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    Designation?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    schoolName?: SortOrder
    eupheusSales?: SortOrder
    state?: SortOrder
    city?: SortOrder
    dateOfWebinar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteRegistrationWhereUniqueInput = {
    id?: number
  }

  export type OsLiteRegistrationOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    Designation?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    schoolName?: SortOrder
    eupheusSales?: SortOrder
    state?: SortOrder
    city?: SortOrder
    dateOfWebinar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OsLiteRegistrationCountOrderByAggregateInput
    _avg?: OsLiteRegistrationAvgOrderByAggregateInput
    _max?: OsLiteRegistrationMaxOrderByAggregateInput
    _min?: OsLiteRegistrationMinOrderByAggregateInput
    _sum?: OsLiteRegistrationSumOrderByAggregateInput
  }

  export type OsLiteRegistrationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OsLiteRegistrationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OsLiteRegistrationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OsLiteRegistrationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    Designation?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    mobile?: StringWithAggregatesFilter | string
    schoolName?: StringWithAggregatesFilter | string
    eupheusSales?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    dateOfWebinar?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OsLiteStateWhereInput = {
    AND?: Enumerable<OsLiteStateWhereInput>
    OR?: Enumerable<OsLiteStateWhereInput>
    NOT?: Enumerable<OsLiteStateWhereInput>
    id?: IntFilter | number
    state?: StringFilter | string
    oslitePersons?: OsLiteSalesPersonsListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OsLiteStateOrderByWithRelationInput = {
    id?: SortOrder
    state?: SortOrder
    oslitePersons?: OsLiteSalesPersonsOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteStateWhereUniqueInput = {
    id?: number
  }

  export type OsLiteStateOrderByWithAggregationInput = {
    id?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OsLiteStateCountOrderByAggregateInput
    _avg?: OsLiteStateAvgOrderByAggregateInput
    _max?: OsLiteStateMaxOrderByAggregateInput
    _min?: OsLiteStateMinOrderByAggregateInput
    _sum?: OsLiteStateSumOrderByAggregateInput
  }

  export type OsLiteStateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OsLiteStateScalarWhereWithAggregatesInput>
    OR?: Enumerable<OsLiteStateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OsLiteStateScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    state?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type OsLiteSalesPersonsWhereInput = {
    AND?: Enumerable<OsLiteSalesPersonsWhereInput>
    OR?: Enumerable<OsLiteSalesPersonsWhereInput>
    NOT?: Enumerable<OsLiteSalesPersonsWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    stateId?: IntFilter | number
    osliteState?: XOR<OsLiteStateRelationFilter, OsLiteStateWhereInput>
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OsLiteSalesPersonsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    osliteState?: OsLiteStateOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteSalesPersonsWhereUniqueInput = {
    id?: number
  }

  export type OsLiteSalesPersonsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OsLiteSalesPersonsCountOrderByAggregateInput
    _avg?: OsLiteSalesPersonsAvgOrderByAggregateInput
    _max?: OsLiteSalesPersonsMaxOrderByAggregateInput
    _min?: OsLiteSalesPersonsMinOrderByAggregateInput
    _sum?: OsLiteSalesPersonsSumOrderByAggregateInput
  }

  export type OsLiteSalesPersonsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OsLiteSalesPersonsScalarWhereWithAggregatesInput>
    OR?: Enumerable<OsLiteSalesPersonsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OsLiteSalesPersonsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    stateId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type NewsCreateInput = {
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    user: UserCreateNestedOneWithoutNewsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUncheckedCreateInput = {
    id?: number
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUpdateInput = {
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutNewsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateManyInput = {
    id?: number
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdBy: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUpdateManyMutationInput = {
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
    news?: NewsCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    email: string
    password: string
    news?: NewsUncheckedCreateNestedManyWithoutUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    news?: NewsUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    news?: NewsUncheckedUpdateManyWithoutUserInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    school: SchoolsCreateNestedOneWithoutPaymentInput
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateInput = {
    id?: number
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    SchoolId: number
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    school?: SchoolsUpdateOneRequiredWithoutPaymentInput
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    SchoolId?: IntFieldUpdateOperationsInput | number
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: number
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    SchoolId: number
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    SchoolId?: IntFieldUpdateOperationsInput | number
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolsCreateInput = {
    name: string
    state: string
    city: string
    payment?: PaymentCreateNestedManyWithoutSchoolInput
    coupon: string
    price: number
  }

  export type SchoolsUncheckedCreateInput = {
    id?: number
    name: string
    state: string
    city: string
    payment?: PaymentUncheckedCreateNestedManyWithoutSchoolInput
    coupon: string
    price: number
  }

  export type SchoolsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    payment?: PaymentUpdateManyWithoutSchoolInput
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type SchoolsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    payment?: PaymentUncheckedUpdateManyWithoutSchoolInput
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type SchoolsCreateManyInput = {
    id?: number
    name: string
    state: string
    city: string
    coupon: string
    price: number
  }

  export type SchoolsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type SchoolsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type UnsubscribeCreateInput = {
    email: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnsubscribeUncheckedCreateInput = {
    id?: number
    email: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnsubscribeUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnsubscribeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnsubscribeCreateManyInput = {
    id?: number
    email: string
    status: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UnsubscribeUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UnsubscribeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteRegistrationCreateInput = {
    firstName: string
    lastName: string
    Designation: string
    email: string
    mobile: string
    schoolName: string
    eupheusSales: string
    state: string
    city: string
    dateOfWebinar: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteRegistrationUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    Designation: string
    email: string
    mobile: string
    schoolName: string
    eupheusSales: string
    state: string
    city: string
    dateOfWebinar: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteRegistrationUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    Designation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    eupheusSales?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    dateOfWebinar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteRegistrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    Designation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    eupheusSales?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    dateOfWebinar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteRegistrationCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    Designation: string
    email: string
    mobile: string
    schoolName: string
    eupheusSales: string
    state: string
    city: string
    dateOfWebinar: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteRegistrationUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    Designation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    eupheusSales?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    dateOfWebinar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteRegistrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    Designation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mobile?: StringFieldUpdateOperationsInput | string
    schoolName?: StringFieldUpdateOperationsInput | string
    eupheusSales?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    dateOfWebinar?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteStateCreateInput = {
    state: string
    oslitePersons?: OsLiteSalesPersonsCreateNestedManyWithoutOsliteStateInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteStateUncheckedCreateInput = {
    id?: number
    state: string
    oslitePersons?: OsLiteSalesPersonsUncheckedCreateNestedManyWithoutOsliteStateInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteStateUpdateInput = {
    state?: StringFieldUpdateOperationsInput | string
    oslitePersons?: OsLiteSalesPersonsUpdateManyWithoutOsliteStateInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteStateUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
    oslitePersons?: OsLiteSalesPersonsUncheckedUpdateManyWithoutOsliteStateInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteStateCreateManyInput = {
    id?: number
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteStateUpdateManyMutationInput = {
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteStateUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsCreateInput = {
    name: string
    osliteState: OsLiteStateCreateNestedOneWithoutOslitePersonsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsUncheckedCreateInput = {
    id?: number
    name: string
    stateId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    osliteState?: OsLiteStateUpdateOneRequiredWithoutOslitePersonsInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    stateId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsCreateManyInput = {
    id?: number
    name: string
    stateId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    stateId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NewsCountOrderByAggregateInput = {
    id?: SortOrder
    headline?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    link?: SortOrder
    imgUrl?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsAvgOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type NewsMaxOrderByAggregateInput = {
    id?: SortOrder
    headline?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    link?: SortOrder
    imgUrl?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsMinOrderByAggregateInput = {
    id?: SortOrder
    headline?: SortOrder
    desc?: SortOrder
    date?: SortOrder
    link?: SortOrder
    imgUrl?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsSumOrderByAggregateInput = {
    id?: SortOrder
    createdBy?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NewsListRelationFilter = {
    every?: NewsWhereInput
    some?: NewsWhereInput
    none?: NewsWhereInput
  }

  export type NewsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SchoolsRelationFilter = {
    is?: SchoolsWhereInput
    isNot?: SchoolsWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    paymentID?: SortOrder
    parentName?: SortOrder
    class?: SortOrder
    section?: SortOrder
    SchoolId?: SortOrder
    orderid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    SchoolId?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    paymentID?: SortOrder
    parentName?: SortOrder
    class?: SortOrder
    section?: SortOrder
    SchoolId?: SortOrder
    orderid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    paymentID?: SortOrder
    parentName?: SortOrder
    class?: SortOrder
    section?: SortOrder
    SchoolId?: SortOrder
    orderid?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    id?: SortOrder
    class?: SortOrder
    SchoolId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    state?: SortOrder
    city?: SortOrder
    coupon?: SortOrder
    price?: SortOrder
  }

  export type SchoolsAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type SchoolsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    state?: SortOrder
    city?: SortOrder
    coupon?: SortOrder
    price?: SortOrder
  }

  export type SchoolsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    state?: SortOrder
    city?: SortOrder
    coupon?: SortOrder
    price?: SortOrder
  }

  export type SchoolsSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type UnsubscribeCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnsubscribeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UnsubscribeMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnsubscribeMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnsubscribeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type OsLiteRegistrationCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    Designation?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    schoolName?: SortOrder
    eupheusSales?: SortOrder
    state?: SortOrder
    city?: SortOrder
    dateOfWebinar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteRegistrationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OsLiteRegistrationMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    Designation?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    schoolName?: SortOrder
    eupheusSales?: SortOrder
    state?: SortOrder
    city?: SortOrder
    dateOfWebinar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteRegistrationMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    Designation?: SortOrder
    email?: SortOrder
    mobile?: SortOrder
    schoolName?: SortOrder
    eupheusSales?: SortOrder
    state?: SortOrder
    city?: SortOrder
    dateOfWebinar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteRegistrationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OsLiteSalesPersonsListRelationFilter = {
    every?: OsLiteSalesPersonsWhereInput
    some?: OsLiteSalesPersonsWhereInput
    none?: OsLiteSalesPersonsWhereInput
  }

  export type OsLiteSalesPersonsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OsLiteStateCountOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteStateAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OsLiteStateMaxOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteStateMinOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteStateSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type OsLiteStateRelationFilter = {
    is?: OsLiteStateWhereInput
    isNot?: OsLiteStateWhereInput
  }

  export type OsLiteSalesPersonsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteSalesPersonsAvgOrderByAggregateInput = {
    id?: SortOrder
    stateId?: SortOrder
  }

  export type OsLiteSalesPersonsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteSalesPersonsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    stateId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OsLiteSalesPersonsSumOrderByAggregateInput = {
    id?: SortOrder
    stateId?: SortOrder
  }

  export type UserCreateNestedOneWithoutNewsInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutNewsInput = {
    create?: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNewsInput
    upsert?: UserUpsertWithoutNewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NewsCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NewsCreateWithoutUserInput>, Enumerable<NewsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutUserInput>
    createMany?: NewsCreateManyUserInputEnvelope
    connect?: Enumerable<NewsWhereUniqueInput>
  }

  export type NewsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<NewsCreateWithoutUserInput>, Enumerable<NewsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutUserInput>
    createMany?: NewsCreateManyUserInputEnvelope
    connect?: Enumerable<NewsWhereUniqueInput>
  }

  export type NewsUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NewsCreateWithoutUserInput>, Enumerable<NewsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NewsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NewsCreateManyUserInputEnvelope
    set?: Enumerable<NewsWhereUniqueInput>
    disconnect?: Enumerable<NewsWhereUniqueInput>
    delete?: Enumerable<NewsWhereUniqueInput>
    connect?: Enumerable<NewsWhereUniqueInput>
    update?: Enumerable<NewsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NewsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NewsScalarWhereInput>
  }

  export type NewsUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<NewsCreateWithoutUserInput>, Enumerable<NewsUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<NewsCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<NewsUpsertWithWhereUniqueWithoutUserInput>
    createMany?: NewsCreateManyUserInputEnvelope
    set?: Enumerable<NewsWhereUniqueInput>
    disconnect?: Enumerable<NewsWhereUniqueInput>
    delete?: Enumerable<NewsWhereUniqueInput>
    connect?: Enumerable<NewsWhereUniqueInput>
    update?: Enumerable<NewsUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<NewsUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<NewsScalarWhereInput>
  }

  export type SchoolsCreateNestedOneWithoutPaymentInput = {
    create?: XOR<SchoolsCreateWithoutPaymentInput, SchoolsUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: SchoolsCreateOrConnectWithoutPaymentInput
    connect?: SchoolsWhereUniqueInput
  }

  export type SchoolsUpdateOneRequiredWithoutPaymentInput = {
    create?: XOR<SchoolsCreateWithoutPaymentInput, SchoolsUncheckedCreateWithoutPaymentInput>
    connectOrCreate?: SchoolsCreateOrConnectWithoutPaymentInput
    upsert?: SchoolsUpsertWithoutPaymentInput
    connect?: SchoolsWhereUniqueInput
    update?: XOR<SchoolsUpdateWithoutPaymentInput, SchoolsUncheckedUpdateWithoutPaymentInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PaymentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutSchoolInput>, Enumerable<PaymentUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutSchoolInput>
    createMany?: PaymentCreateManySchoolInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type PaymentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutSchoolInput>, Enumerable<PaymentUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutSchoolInput>
    createMany?: PaymentCreateManySchoolInputEnvelope
    connect?: Enumerable<PaymentWhereUniqueInput>
  }

  export type PaymentUpdateManyWithoutSchoolInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutSchoolInput>, Enumerable<PaymentUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutSchoolInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutSchoolInput>
    createMany?: PaymentCreateManySchoolInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutSchoolInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutSchoolInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PaymentUncheckedUpdateManyWithoutSchoolInput = {
    create?: XOR<Enumerable<PaymentCreateWithoutSchoolInput>, Enumerable<PaymentUncheckedCreateWithoutSchoolInput>>
    connectOrCreate?: Enumerable<PaymentCreateOrConnectWithoutSchoolInput>
    upsert?: Enumerable<PaymentUpsertWithWhereUniqueWithoutSchoolInput>
    createMany?: PaymentCreateManySchoolInputEnvelope
    set?: Enumerable<PaymentWhereUniqueInput>
    disconnect?: Enumerable<PaymentWhereUniqueInput>
    delete?: Enumerable<PaymentWhereUniqueInput>
    connect?: Enumerable<PaymentWhereUniqueInput>
    update?: Enumerable<PaymentUpdateWithWhereUniqueWithoutSchoolInput>
    updateMany?: Enumerable<PaymentUpdateManyWithWhereWithoutSchoolInput>
    deleteMany?: Enumerable<PaymentScalarWhereInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type OsLiteSalesPersonsCreateNestedManyWithoutOsliteStateInput = {
    create?: XOR<Enumerable<OsLiteSalesPersonsCreateWithoutOsliteStateInput>, Enumerable<OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>>
    connectOrCreate?: Enumerable<OsLiteSalesPersonsCreateOrConnectWithoutOsliteStateInput>
    createMany?: OsLiteSalesPersonsCreateManyOsliteStateInputEnvelope
    connect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
  }

  export type OsLiteSalesPersonsUncheckedCreateNestedManyWithoutOsliteStateInput = {
    create?: XOR<Enumerable<OsLiteSalesPersonsCreateWithoutOsliteStateInput>, Enumerable<OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>>
    connectOrCreate?: Enumerable<OsLiteSalesPersonsCreateOrConnectWithoutOsliteStateInput>
    createMany?: OsLiteSalesPersonsCreateManyOsliteStateInputEnvelope
    connect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
  }

  export type OsLiteSalesPersonsUpdateManyWithoutOsliteStateInput = {
    create?: XOR<Enumerable<OsLiteSalesPersonsCreateWithoutOsliteStateInput>, Enumerable<OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>>
    connectOrCreate?: Enumerable<OsLiteSalesPersonsCreateOrConnectWithoutOsliteStateInput>
    upsert?: Enumerable<OsLiteSalesPersonsUpsertWithWhereUniqueWithoutOsliteStateInput>
    createMany?: OsLiteSalesPersonsCreateManyOsliteStateInputEnvelope
    set?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    disconnect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    delete?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    connect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    update?: Enumerable<OsLiteSalesPersonsUpdateWithWhereUniqueWithoutOsliteStateInput>
    updateMany?: Enumerable<OsLiteSalesPersonsUpdateManyWithWhereWithoutOsliteStateInput>
    deleteMany?: Enumerable<OsLiteSalesPersonsScalarWhereInput>
  }

  export type OsLiteSalesPersonsUncheckedUpdateManyWithoutOsliteStateInput = {
    create?: XOR<Enumerable<OsLiteSalesPersonsCreateWithoutOsliteStateInput>, Enumerable<OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>>
    connectOrCreate?: Enumerable<OsLiteSalesPersonsCreateOrConnectWithoutOsliteStateInput>
    upsert?: Enumerable<OsLiteSalesPersonsUpsertWithWhereUniqueWithoutOsliteStateInput>
    createMany?: OsLiteSalesPersonsCreateManyOsliteStateInputEnvelope
    set?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    disconnect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    delete?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    connect?: Enumerable<OsLiteSalesPersonsWhereUniqueInput>
    update?: Enumerable<OsLiteSalesPersonsUpdateWithWhereUniqueWithoutOsliteStateInput>
    updateMany?: Enumerable<OsLiteSalesPersonsUpdateManyWithWhereWithoutOsliteStateInput>
    deleteMany?: Enumerable<OsLiteSalesPersonsScalarWhereInput>
  }

  export type OsLiteStateCreateNestedOneWithoutOslitePersonsInput = {
    create?: XOR<OsLiteStateCreateWithoutOslitePersonsInput, OsLiteStateUncheckedCreateWithoutOslitePersonsInput>
    connectOrCreate?: OsLiteStateCreateOrConnectWithoutOslitePersonsInput
    connect?: OsLiteStateWhereUniqueInput
  }

  export type OsLiteStateUpdateOneRequiredWithoutOslitePersonsInput = {
    create?: XOR<OsLiteStateCreateWithoutOslitePersonsInput, OsLiteStateUncheckedCreateWithoutOslitePersonsInput>
    connectOrCreate?: OsLiteStateCreateOrConnectWithoutOslitePersonsInput
    upsert?: OsLiteStateUpsertWithoutOslitePersonsInput
    connect?: OsLiteStateWhereUniqueInput
    update?: XOR<OsLiteStateUpdateWithoutOslitePersonsInput, OsLiteStateUncheckedUpdateWithoutOslitePersonsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type UserCreateWithoutNewsInput = {
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutNewsInput = {
    id?: number
    username: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutNewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpsertWithoutNewsInput = {
    update: XOR<UserUpdateWithoutNewsInput, UserUncheckedUpdateWithoutNewsInput>
    create: XOR<UserCreateWithoutNewsInput, UserUncheckedCreateWithoutNewsInput>
  }

  export type UserUpdateWithoutNewsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateWithoutUserInput = {
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUncheckedCreateWithoutUserInput = {
    id?: number
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsCreateOrConnectWithoutUserInput = {
    where: NewsWhereUniqueInput
    create: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput>
  }

  export type NewsCreateManyUserInputEnvelope = {
    data: Enumerable<NewsCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type NewsUpsertWithWhereUniqueWithoutUserInput = {
    where: NewsWhereUniqueInput
    update: XOR<NewsUpdateWithoutUserInput, NewsUncheckedUpdateWithoutUserInput>
    create: XOR<NewsCreateWithoutUserInput, NewsUncheckedCreateWithoutUserInput>
  }

  export type NewsUpdateWithWhereUniqueWithoutUserInput = {
    where: NewsWhereUniqueInput
    data: XOR<NewsUpdateWithoutUserInput, NewsUncheckedUpdateWithoutUserInput>
  }

  export type NewsUpdateManyWithWhereWithoutUserInput = {
    where: NewsScalarWhereInput
    data: XOR<NewsUpdateManyMutationInput, NewsUncheckedUpdateManyWithoutNewsInput>
  }

  export type NewsScalarWhereInput = {
    AND?: Enumerable<NewsScalarWhereInput>
    OR?: Enumerable<NewsScalarWhereInput>
    NOT?: Enumerable<NewsScalarWhereInput>
    id?: IntFilter | number
    headline?: StringFilter | string
    desc?: StringFilter | string
    date?: StringFilter | string
    link?: StringFilter | string
    imgUrl?: StringFilter | string
    createdBy?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SchoolsCreateWithoutPaymentInput = {
    name: string
    state: string
    city: string
    coupon: string
    price: number
  }

  export type SchoolsUncheckedCreateWithoutPaymentInput = {
    id?: number
    name: string
    state: string
    city: string
    coupon: string
    price: number
  }

  export type SchoolsCreateOrConnectWithoutPaymentInput = {
    where: SchoolsWhereUniqueInput
    create: XOR<SchoolsCreateWithoutPaymentInput, SchoolsUncheckedCreateWithoutPaymentInput>
  }

  export type SchoolsUpsertWithoutPaymentInput = {
    update: XOR<SchoolsUpdateWithoutPaymentInput, SchoolsUncheckedUpdateWithoutPaymentInput>
    create: XOR<SchoolsCreateWithoutPaymentInput, SchoolsUncheckedCreateWithoutPaymentInput>
  }

  export type SchoolsUpdateWithoutPaymentInput = {
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type SchoolsUncheckedUpdateWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    coupon?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentCreateWithoutSchoolInput = {
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutSchoolInput = {
    id?: number
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentCreateManySchoolInputEnvelope = {
    data: Enumerable<PaymentCreateManySchoolInput>
    skipDuplicates?: boolean
  }

  export type PaymentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutSchoolInput, PaymentUncheckedUpdateWithoutSchoolInput>
    create: XOR<PaymentCreateWithoutSchoolInput, PaymentUncheckedCreateWithoutSchoolInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutSchoolInput, PaymentUncheckedUpdateWithoutSchoolInput>
  }

  export type PaymentUpdateManyWithWhereWithoutSchoolInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: Enumerable<PaymentScalarWhereInput>
    OR?: Enumerable<PaymentScalarWhereInput>
    NOT?: Enumerable<PaymentScalarWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    paymentID?: StringFilter | string
    parentName?: StringFilter | string
    class?: IntFilter | number
    section?: StringFilter | string
    SchoolId?: IntFilter | number
    orderid?: StringNullableFilter | string | null
    status?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OsLiteSalesPersonsCreateWithoutOsliteStateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsCreateOrConnectWithoutOsliteStateInput = {
    where: OsLiteSalesPersonsWhereUniqueInput
    create: XOR<OsLiteSalesPersonsCreateWithoutOsliteStateInput, OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>
  }

  export type OsLiteSalesPersonsCreateManyOsliteStateInputEnvelope = {
    data: Enumerable<OsLiteSalesPersonsCreateManyOsliteStateInput>
    skipDuplicates?: boolean
  }

  export type OsLiteSalesPersonsUpsertWithWhereUniqueWithoutOsliteStateInput = {
    where: OsLiteSalesPersonsWhereUniqueInput
    update: XOR<OsLiteSalesPersonsUpdateWithoutOsliteStateInput, OsLiteSalesPersonsUncheckedUpdateWithoutOsliteStateInput>
    create: XOR<OsLiteSalesPersonsCreateWithoutOsliteStateInput, OsLiteSalesPersonsUncheckedCreateWithoutOsliteStateInput>
  }

  export type OsLiteSalesPersonsUpdateWithWhereUniqueWithoutOsliteStateInput = {
    where: OsLiteSalesPersonsWhereUniqueInput
    data: XOR<OsLiteSalesPersonsUpdateWithoutOsliteStateInput, OsLiteSalesPersonsUncheckedUpdateWithoutOsliteStateInput>
  }

  export type OsLiteSalesPersonsUpdateManyWithWhereWithoutOsliteStateInput = {
    where: OsLiteSalesPersonsScalarWhereInput
    data: XOR<OsLiteSalesPersonsUpdateManyMutationInput, OsLiteSalesPersonsUncheckedUpdateManyWithoutOslitePersonsInput>
  }

  export type OsLiteSalesPersonsScalarWhereInput = {
    AND?: Enumerable<OsLiteSalesPersonsScalarWhereInput>
    OR?: Enumerable<OsLiteSalesPersonsScalarWhereInput>
    NOT?: Enumerable<OsLiteSalesPersonsScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    stateId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type OsLiteStateCreateWithoutOslitePersonsInput = {
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteStateUncheckedCreateWithoutOslitePersonsInput = {
    id?: number
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteStateCreateOrConnectWithoutOslitePersonsInput = {
    where: OsLiteStateWhereUniqueInput
    create: XOR<OsLiteStateCreateWithoutOslitePersonsInput, OsLiteStateUncheckedCreateWithoutOslitePersonsInput>
  }

  export type OsLiteStateUpsertWithoutOslitePersonsInput = {
    update: XOR<OsLiteStateUpdateWithoutOslitePersonsInput, OsLiteStateUncheckedUpdateWithoutOslitePersonsInput>
    create: XOR<OsLiteStateCreateWithoutOslitePersonsInput, OsLiteStateUncheckedCreateWithoutOslitePersonsInput>
  }

  export type OsLiteStateUpdateWithoutOslitePersonsInput = {
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteStateUncheckedUpdateWithoutOslitePersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsCreateManyUserInput = {
    id?: number
    headline: string
    desc: string
    date: string
    link: string
    imgUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsUpdateWithoutUserInput = {
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsUncheckedUpdateManyWithoutNewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    headline?: StringFieldUpdateOperationsInput | string
    desc?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imgUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManySchoolInput = {
    id?: number
    userName: string
    email: string
    phone: string
    paymentID: string
    parentName: string
    class: number
    section: string
    orderid?: string | null
    status?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateWithoutSchoolInput = {
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutSchoolInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPaymentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    paymentID?: StringFieldUpdateOperationsInput | string
    parentName?: StringFieldUpdateOperationsInput | string
    class?: IntFieldUpdateOperationsInput | number
    section?: StringFieldUpdateOperationsInput | string
    orderid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsCreateManyOsliteStateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OsLiteSalesPersonsUpdateWithoutOsliteStateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsUncheckedUpdateWithoutOsliteStateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OsLiteSalesPersonsUncheckedUpdateManyWithoutOslitePersonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}